<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js中堆的实现</title>
      <link href="2021/07/23/js-zhong-dui-de-shi-xian/"/>
      <url>2021/07/23/js-zhong-dui-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="js中堆的实现"><a href="#js中堆的实现" class="headerlink" title="js中堆的实现"></a>js中堆的实现</h1><p>苦于JavaScript没有内置<code>堆</code>这种数据结构，那，自己写一个吧~</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Heap</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @param arr，利用输入的arr构造堆     * @param type，默认堆的类型type为大根堆     */</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">'big'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">'big'</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token string">'small'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Wrong type! type should be "big" or "small"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span><span class="token comment">//堆的类型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//插入每一个数组中的元素</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 向堆添加一个元素,自下向上调整。终止条件为curIndex = 0；     * @param val     */</span>    <span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> container<span class="token punctuation">,</span> type <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先放在末尾</span>        <span class="token keyword">let</span> curIndex <span class="token operator">=</span> container<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> parent<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'big'</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">>=</span> container<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//大根堆，不用向上调整了</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'small'</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> container<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//小根堆，不用向上调整了</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//交换,向上调整</span>            <span class="token punctuation">[</span>container<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>container<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            curIndex <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 去掉堆的根，自上向下调整.终止条件只能是son越界，因为不确定最后的parent是谁！！！     * @returns &#123;null|*&#125;返回堆的根     */</span>    <span class="token function-variable function">extract</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> container<span class="token punctuation">,</span> type <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//堆为空</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//交换头尾元素</span>        <span class="token punctuation">[</span>container<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">[</span>container<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>container<span class="token punctuation">[</span>container<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除最后一个元素（原来是堆的根）</span>        <span class="token keyword">const</span> len <span class="token operator">=</span> container<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">let</span> curParent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> curParent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//默认左孩子</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>son <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'big'</span> <span class="token operator">&amp;&amp;</span> son <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">[</span>son <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> container<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//右孩子更大</span>                son <span class="token operator">=</span> son <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'small'</span> <span class="token operator">&amp;&amp;</span> son <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">[</span>son <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> container<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//右孩子更小</span>                son <span class="token operator">=</span> son <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'big'</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">[</span>curParent<span class="token punctuation">]</span> <span class="token operator">>=</span> container<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//停止调整</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'small'</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">[</span>curParent<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> container<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//停止调整</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">[</span>container<span class="token punctuation">[</span>curParent<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>container<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">[</span>curParent<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            curParent <span class="token operator">=</span> son<span class="token punctuation">;</span>            son <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> curParent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//默认左孩子</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment">//返回原来的堆的根</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @returns &#123;*&#125;返回堆顶的元素     */</span>    <span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> container <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @returns &#123;number&#125;返回堆的长度（堆中元素的个数）     */</span>    <span class="token function-variable function">getLen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> container <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//debug</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Heap</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造大顶堆</span>myHeap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myHeap<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myHeap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span>myHeap<span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React路由</title>
      <link href="2021/07/21/react-lu-you/"/>
      <url>2021/07/21/react-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="React路由"><a href="#React路由" class="headerlink" title="React路由"></a>React路由</h1><hr><h2 id="将路由组件和普通组件进行分开，使用NavLink"><a href="#将路由组件和普通组件进行分开，使用NavLink" class="headerlink" title="将路由组件和普通组件进行分开，使用NavLink"></a>将路由组件和普通组件进行分开，使用NavLink</h2><p><code>&lt;NavLink&gt;</code>是<code>&lt;Link&gt;</code>的一个特定版本，会在匹配上当前的url的时候给已经渲染的元素添加参数，组件的属性有</p><ul><li>activeClassName(string)：设置选中样式，默认值为active</li><li>activeStyle(object)：当元素被选中时，为此元素添加样式</li><li>exact(bool)：为true时，只有当导致和完全匹配class和style才会应用</li><li>strict(bool)：为true时，在确定为位置是否与当前URL匹配时，将考虑位置pathname后的斜线</li><li>isActive(func)判断链接是否激活的额外逻辑的功能</li></ul><hr><h2 id="自己封装NavLink，减少原生NavLink中的代码量"><a href="#自己封装NavLink，减少原生NavLink中的代码量" class="headerlink" title="自己封装NavLink，减少原生NavLink中的代码量"></a>自己封装NavLink，减少原生NavLink中的代码量</h2><p>子组件可以通过<code>let &#123;children&#125; = this.props;</code>获取标签体中的内容，也就是MyNavLink标签中间的内容。因此这里的NavLink使用<code>rest操作符</code>之后，不用写标签的内容了。</p><hr><h2 id="Switch的使用"><a href="#Switch的使用" class="headerlink" title="Switch的使用"></a>Switch的使用</h2><ol><li>通常情况下，path和component是一一对应的关系</li><li>Switch可以提高路由匹配效率，单一匹配。</li></ol><hr><h2 id="Public多级路径下样式丢失的问题"><a href="#Public多级路径下样式丢失的问题" class="headerlink" title="Public多级路径下样式丢失的问题"></a>Public多级路径下样式丢失的问题</h2><p>原因是引入CSS文件的时候使用的是相对路径，当使用多级路由的时候，会以当前URL为基准寻找CSS文件，自然是找不到。</p><p>解决方法：</p><ol><li>（推荐）直接使用<code>绝对路径</code>固定从根目录开始寻找CSS文件。</li><li>使用脚手架提供的宏<code>%PUBLIC_URL%</code>作为路径的前缀。</li><li>使用HashRouter（URL不美观，不推荐）</li></ol><hr><h2 id="路由的严格匹配和模糊匹配"><a href="#路由的严格匹配和模糊匹配" class="headerlink" title="路由的严格匹配和模糊匹配"></a>路由的严格匹配和模糊匹配</h2><ol><li>模糊匹配：不用写<code>exact</code>属性即可。只要当前路由地址url和我这里匹配，就停止比较其他路由，加载组件（path的值是路由规则的前缀即可）；一旦不匹配，停止比较后续url，不加载组件，比较下一个路由。</li><li>精准匹配：path和to的属性值完全一样才加载组件。标签中写个exact即可开启。</li><li>不要轻易使用严格匹配，只有模糊匹配影响工作再添加exact属性开启。否则可能影响二级路由的匹配。</li></ol><hr><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><code>&lt;Redirect to=&quot;/about&quot;/&gt;</code>可以设置Switch中路径都不匹配时重定向的地址。放在Switch的最后，相当于switch的默认值。</p><hr><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><ol><li>注册子路由时要写上父路由的path值</li><li>路由的匹配是按照注册路由的顺序进行的。</li></ol><hr><h2 id="向路由组件传递params参数"><a href="#向路由组件传递params参数" class="headerlink" title="向路由组件传递params参数"></a>向路由组件传递params参数</h2><p>路由链接(携带参数)：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span>  <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/about/message/detail/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>message<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>message<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>message<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注册路由(声明接受params参数)：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/about/message/detail/:id/:title<span class="token punctuation">'</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>Detail<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接受params参数：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"history"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"length"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token property">"action"</span><span class="token operator">:</span> <span class="token string">"POP"</span><span class="token punctuation">,</span>    <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"&#123;hash: \"\", key: \"aljghv\", pathname: \"/about/message…&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"createHref"</span><span class="token operator">:</span> <span class="token string">"ƒ createHref() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"push"</span><span class="token operator">:</span> <span class="token string">"ƒ push() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"replace"</span><span class="token operator">:</span> <span class="token string">"ƒ replace() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"go"</span><span class="token operator">:</span> <span class="token string">"ƒ go() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"goBack"</span><span class="token operator">:</span> <span class="token string">"ƒ goBack() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"goForward"</span><span class="token operator">:</span> <span class="token string">"ƒ goForward() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"block"</span><span class="token operator">:</span> <span class="token string">"ƒ block() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"ƒ listen() &#123;&#125;"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"location"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"pathname"</span><span class="token operator">:</span> <span class="token string">"/about/message/detail/001/消息1"</span><span class="token punctuation">,</span>    <span class="token property">"search"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"aljghv"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/about/message/detail/:id/:title"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/about/message/detail/001/消息1"</span><span class="token punctuation">,</span>    <span class="token property">"isExact"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"params"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"001"</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"消息1"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="向路由组件传递search参数"><a href="#向路由组件传递search参数" class="headerlink" title="向路由组件传递search参数"></a>向路由组件传递search参数</h2><p>路由链接(携带参数)：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/about/message/detail?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>message<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>message<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>message<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注册路由(无需声明，正常注册)：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/about/message/detail<span class="token punctuation">'</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>Detail<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接受search参数：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> search_url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span><span class="token keyword">let</span> search_obj <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>search_url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除问号，转换为对象，需要借助'querystring'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"history"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"length"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>    <span class="token property">"action"</span><span class="token operator">:</span> <span class="token string">"PUSH"</span><span class="token punctuation">,</span>    <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"&#123;hash: \"\", key: \"e1wfoy\", pathname: \"/about/message…&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"createHref"</span><span class="token operator">:</span> <span class="token string">"ƒ createHref() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"push"</span><span class="token operator">:</span> <span class="token string">"ƒ push() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"replace"</span><span class="token operator">:</span> <span class="token string">"ƒ replace() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"go"</span><span class="token operator">:</span> <span class="token string">"ƒ go() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"goBack"</span><span class="token operator">:</span> <span class="token string">"ƒ goBack() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"goForward"</span><span class="token operator">:</span> <span class="token string">"ƒ goForward() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"block"</span><span class="token operator">:</span> <span class="token string">"ƒ block() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"ƒ listen() &#123;&#125;"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"location"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"pathname"</span><span class="token operator">:</span> <span class="token string">"/about/message/detail"</span><span class="token punctuation">,</span>    <span class="token property">"search"</span><span class="token operator">:</span> <span class="token string">"?id=001&amp;title=消息1"</span><span class="token punctuation">,</span>    <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"e1wfoy"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/about/message/detail"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/about/message/detail"</span><span class="token punctuation">,</span>    <span class="token property">"isExact"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"params"</span><span class="token operator">:</span> <span class="token string">"&#123;&#125;"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="向路由组件传递state参数"><a href="#向路由组件传递state参数" class="headerlink" title="向路由组件传递state参数"></a>向路由组件传递state参数</h2><p>路由链接(携带参数)：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>         <span class="token punctuation">&#123;</span>            pathname<span class="token operator">:</span> <span class="token string">'/about/message/detail'</span><span class="token punctuation">,</span>             state<span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token operator">:</span> message<span class="token punctuation">.</span>id<span class="token punctuation">,</span> title<span class="token operator">:</span> message<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>message<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册路由(无需声明，正常注册)：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/about/message/detail<span class="token punctuation">'</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>Detail<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接受search参数：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"history"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"length"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>    <span class="token property">"action"</span><span class="token operator">:</span> <span class="token string">"PUSH"</span><span class="token punctuation">,</span>    <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"&#123;hash: \"\", key: \"81rh25\", pathname: \"/about/message…&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"createHref"</span><span class="token operator">:</span> <span class="token string">"ƒ createHref() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"push"</span><span class="token operator">:</span> <span class="token string">"ƒ push() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"replace"</span><span class="token operator">:</span> <span class="token string">"ƒ replace() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"go"</span><span class="token operator">:</span> <span class="token string">"ƒ go() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"goBack"</span><span class="token operator">:</span> <span class="token string">"ƒ goBack() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"goForward"</span><span class="token operator">:</span> <span class="token string">"ƒ goForward() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"block"</span><span class="token operator">:</span> <span class="token string">"ƒ block() &#123;&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"listen"</span><span class="token operator">:</span> <span class="token string">"ƒ listen() &#123;&#125;"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"location"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"pathname"</span><span class="token operator">:</span> <span class="token string">"/about/message/detail"</span><span class="token punctuation">,</span>    <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"&#123;id: \"001\", title: \"消息1\"&#125;"</span><span class="token punctuation">,</span>    <span class="token property">"search"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"81rh25"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/about/message/detail"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/about/message/detail"</span><span class="token punctuation">,</span>    <span class="token property">"isExact"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"params"</span><span class="token operator">:</span> <span class="token string">"&#123;&#125;"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="withRouter函数"><a href="#withRouter函数" class="headerlink" title="withRouter函数"></a>withRouter函数</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> withRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>withRouter可以加工一般组件，让一般组件具有路由组件所特有的API。使用前需要引入react-route</li><li>withRouter是一个函数，接收一般组件，返回加工后的组件。</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> withRouter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Head</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container jumbotron bg-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>display-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">React Router Demo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-sm btn-primary mx-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">后退</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">goForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-sm btn-primary mx-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">前进</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//把一般组件传入withRouter函数，可以转换为路由组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>Head<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Browser-Router-or-Hash-Router"><a href="#Browser-Router-or-Hash-Router" class="headerlink" title="Browser Router or Hash Router"></a>Browser Router or Hash Router</h2><ol><li>优先考虑Browser Router，它使用HTML5的<code>history API</code>，更加美观，只是不兼容IE9以下。</li><li>Hash Router最大的问题是<code>会丢失state参数</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记</title>
      <link href="2021/03/18/jquery-bi-ji/"/>
      <url>2021/03/18/jquery-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="jQuery-安装与使用"><a href="#jQuery-安装与使用" class="headerlink" title="jQuery 安装与使用"></a>jQuery 安装与使用</h4><ul><li><p>本地：下载 jQuery 库， 将下载的文件放在网页的同一目录下，就可以使用jQuery。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jquery-1.10.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>CDN：Staticfile CDN、百度、又拍云、新浪、谷歌和微软的服务器都存有 jQuery 。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="jQuery-使用版本"><a href="#jQuery-使用版本" class="headerlink" title="jQuery 使用版本"></a>jQuery 使用版本</h4><p>我们可以在浏览器的 Console 窗口中使用 <strong>$.fn.jquery</strong> 命令查看当前 jQuery 使用的版本。</p><h4 id="jQuery-语法"><a href="#jQuery-语法" class="headerlink" title="jQuery 语法"></a>jQuery 语法</h4><p>jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法： <strong>$(selector).action()</strong></p><ul><li>美元符号定义 jQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素</li><li>jQuery 的 action() 执行对元素的操作</li></ul><p>实例:</p><ul><li>$(this).hide() - 隐藏当前元素</li><li>$(“p”).hide() - 隐藏所有 <p> 元素</p></li><li>$(“p.test”).hide() - 隐藏所有 class=”test” 的 <p> 元素</p></li><li>$(“#test”).hide() - 隐藏 id=”test” 的元素</li></ul><h4 id="文档就绪事件"><a href="#文档就绪事件" class="headerlink" title="文档就绪事件"></a>文档就绪事件</h4><p>您也许已经注意到在我们的实例中的所有 jQuery 函数位于一个 document ready 函数中：</p>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 开始写 jQuery 代码... </span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即<strong>在 DOM 加载完成后</strong>才可以对 DOM 进行操作。</p><p>如果在文档没有完全加载之前就运行函数，操作可能失败。下面是两个具体的例子：</p><ul><li>试图隐藏一个不存在的元素</li><li>获得未完全加载的图像的大小</li></ul><h4 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h4><p>工具： <a href="https://www.runoob.com/try/trysel.php">jQuery 选择器检测器</a> </p><p>jQuery 选择器允许您对 HTML 元素组或单个元素进行操作。</p><p>jQuery 选择器基于元素的 id、类、类型、属性、属性值等”查找”（或选择）HTML 元素。 它基于已经存在的 <a href="https://www.runoob.com/cssref/css-selectors.html">CSS 选择器</a>，除此之外，它还有一些自定义的选择器。</p><p>jQuery 中所有选择器都<strong>以美元符号开头</strong>：$()。</p><blockquote><p>关于 <strong>:</strong> 和 <strong>[]</strong> 这两个符号的理解</p><p><strong>：</strong>可以理解为种类的意思，如：<strong>p:first</strong>，<strong>p</strong> 的种类为第一个。</p><p><strong>[]</strong> 很自然的可以理解为属性的意思，如：[href] 选取带有 <strong>href</strong> 属性的元素。</p></blockquote><blockquote><p><strong>$(“:button”)</strong> 为 jQuery 中<strong>表单选择器</strong>（貌似与过滤选择器同级），旨在选择所有的按钮，所以会找到所有 type=”button” 的 <input> 元素 和 <button> 元素；而 <strong>$(“button”)</strong> 则为基本选择器，旨在选择为 <strong><button></button></strong> 的标签。</button></p><p><strong>:</strong> 即为 jQuery 的过滤选择器，语法类似于 css 中的伪类选择器；其过滤选择器大概可以分为基本过滤（p:first 之类）、内容过滤（:empty）、子元素过滤(:first-child)和属性过滤 <strong>[href]</strong> 选择器</p></blockquote>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id"</span><span class="token punctuation">,</span> <span class="token string">".class"</span><span class="token punctuation">)</span>  复合选择器<span class="token function">$</span><span class="token punctuation">(</span>div p span<span class="token punctuation">)</span>       层级选择器 <span class="token comment">//div下的p元素中的span元素</span><span class="token function">$</span><span class="token punctuation">(</span>div<span class="token operator">></span>p<span class="token punctuation">)</span>            父子选择器 <span class="token comment">//div下的所有p元素</span><span class="token function">$</span><span class="token punctuation">(</span>div<span class="token operator">+</span>p<span class="token punctuation">)</span>            相邻元素选择器 <span class="token comment">//div后面的p元素(仅一个p)</span><span class="token function">$</span><span class="token punctuation">(</span>div<span class="token operator">~</span>p<span class="token punctuation">)</span>            兄弟选择器  <span class="token comment">//div后面的所有p元素(同级别)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">.</span>p<span class="token operator">:</span>last<span class="token punctuation">)</span>          类选择器 加 过滤选择器  第一个和最后一个（first 或者 last）<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#mytable td:odd"</span><span class="token punctuation">)</span>      层级选择 加 过滤选择器 奇偶（odd 或者 even）<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div p:eq(2)"</span><span class="token punctuation">)</span>    索引选择器 div下的第三个p元素（索引是从<span class="token number">0</span>开始）<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a[href='www.baidu.com']"</span><span class="token punctuation">)</span>  属性选择器<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p:contains(test)"</span><span class="token punctuation">)</span>        <span class="token comment">// 内容过滤选择器，包含text内容的p元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":emtyp"</span><span class="token punctuation">)</span>        <span class="token comment">//内容过滤选择器，所有空标签（不包含子标签和内容的标签）parent 相反</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":hidden"</span><span class="token punctuation">)</span>       <span class="token comment">//所有隐藏元素 visible </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input:enabled"</span><span class="token punctuation">)</span> <span class="token comment">//选取所有启用的表单元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":disabled"</span><span class="token punctuation">)</span>     <span class="token comment">//所有不可用的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input:checked"</span><span class="token punctuation">)</span> <span class="token comment">//获取所有选中的复选框单选按钮等</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select option:selected"</span><span class="token punctuation">)</span> <span class="token comment">//获取选中的选项元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充：</strong></p><p>1.基本选择器</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id"</span><span class="token punctuation">)</span>            <span class="token comment">//ID选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>            <span class="token comment">//元素选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".classname"</span><span class="token punctuation">)</span>     <span class="token comment">//类选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".classname,.classname1,#id1"</span><span class="token punctuation">)</span>  <span class="token comment">//组合选择器，同时具有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.层次选择器</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id>.classname "</span><span class="token punctuation">)</span>    <span class="token comment">//子元素选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id .classname "</span><span class="token punctuation">)</span>    <span class="token comment">//后代元素选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id + .classname "</span><span class="token punctuation">)</span>    <span class="token comment">//紧邻下一个元素选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id ~ .classname "</span><span class="token punctuation">)</span>    <span class="token comment">//兄弟元素选择器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.过滤选择器(重点)</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:first"</span><span class="token punctuation">)</span>    <span class="token comment">//第一个li</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:last"</span><span class="token punctuation">)</span>     <span class="token comment">//最后一个li</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:even"</span><span class="token punctuation">)</span>     <span class="token comment">//挑选下标为偶数的li</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:odd"</span><span class="token punctuation">)</span>      <span class="token comment">//挑选下标为奇数的li</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:eq(4)"</span><span class="token punctuation">)</span>    <span class="token comment">//下标等于 4 的li(第五个 li 元素)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:gt(2)"</span><span class="token punctuation">)</span>    <span class="token comment">//下标大于 2 的li</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:lt(2)"</span><span class="token punctuation">)</span>    <span class="token comment">//下标小于 2 的li</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:not(#runoob)"</span><span class="token punctuation">)</span> <span class="token comment">//挑选除 id="runoob" 以外的所有li</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.2内容过滤选择器</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:contains('Runob')"</span><span class="token punctuation">)</span>    <span class="token comment">// 包含 Runob文本的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"td:empty"</span><span class="token punctuation">)</span>                 <span class="token comment">//不包含子元素或者文本的空元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:has(selector)"</span><span class="token punctuation">)</span>        <span class="token comment">//含有选择器所匹配的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"td:parent"</span><span class="token punctuation">)</span>                <span class="token comment">//含有子元素或者文本的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.3可见性过滤选择器</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:hidden"</span><span class="token punctuation">)</span>       <span class="token comment">//匹配所有不可见元素，或type为hidden的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:visible"</span><span class="token punctuation">)</span>      <span class="token comment">//匹配所有可见元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>3.4属性过滤选择器</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div[id]"</span><span class="token punctuation">)</span>        <span class="token comment">//所有含有 id 属性的 div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div[id='123']"</span><span class="token punctuation">)</span>        <span class="token comment">// id属性值为123的div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div[id!='123']"</span><span class="token punctuation">)</span>        <span class="token comment">// id属性值不等于123的div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div[id^='qq']"</span><span class="token punctuation">)</span>        <span class="token comment">// id属性值以qq开头的div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div[id$='zz']"</span><span class="token punctuation">)</span>        <span class="token comment">// id属性值以zz结尾的div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div[id*='bb']"</span><span class="token punctuation">)</span>        <span class="token comment">// id属性值包含bb的div 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[id][name$='man']"</span><span class="token punctuation">)</span> <span class="token comment">//多属性选过滤，同时满足两个属性的条件的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.5状态过滤选择器</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input:enabled"</span><span class="token punctuation">)</span>    <span class="token comment">// 匹配可用的 input</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input:disabled"</span><span class="token punctuation">)</span>   <span class="token comment">// 匹配不可用的 input</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input:checked"</span><span class="token punctuation">)</span>    <span class="token comment">// 匹配选中的 input</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"option:selected"</span><span class="token punctuation">)</span>  <span class="token comment">// 匹配选中的 option</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.表单选择器</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":input"</span><span class="token punctuation">)</span>      <span class="token comment">//匹配所有 input, textarea, select 和 button 元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":text"</span><span class="token punctuation">)</span>       <span class="token comment">//所有的单行文本框，$(":text") 等价于$("[type=text]")，推荐使用$("input:text")效率更高，下同</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":password"</span><span class="token punctuation">)</span>   <span class="token comment">//所有密码框</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":radio"</span><span class="token punctuation">)</span>      <span class="token comment">//所有单选按钮</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox"</span><span class="token punctuation">)</span>   <span class="token comment">//所有复选框</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":submit"</span><span class="token punctuation">)</span>     <span class="token comment">//所有提交按钮</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":reset"</span><span class="token punctuation">)</span>      <span class="token comment">//所有重置按钮</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":button"</span><span class="token punctuation">)</span>     <span class="token comment">//所有button按钮</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":file"</span><span class="token punctuation">)</span>       <span class="token comment">//所有文件域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h4><p>常见 DOM 事件：</p><table><thead><tr><th align="left">鼠标事件</th><th align="left">键盘事件</th><th align="left">表单事件</th><th align="left">文档/窗口事件</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jquery/event-click.html">click</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-keypress.html">keypress</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-submit.html">submit</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-load.html">load</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/jquery/event-dblclick.html">dblclick</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-keydown.html">keydown</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-change.html">change</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-resize.html">resize</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/jquery/event-mouseenter.html">mouseenter</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-keyup.html">keyup</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-focus.html">focus</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-scroll.html">scroll</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/jquery/event-mouseleave.html">mouseleave</a></td><td align="left"></td><td align="left"><a href="https://www.runoob.com/jquery/event-blur.html">blur</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-unload.html">unload</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/jquery/event-hover.html">hover</a></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h5 id="常用的-jQuery-事件方法"><a href="#常用的-jQuery-事件方法" class="headerlink" title="常用的 jQuery 事件方法"></a>常用的 jQuery 事件方法</h5><ul><li><p><strong>$(document).ready()</strong></p><p>$(document).ready() 方法允许我们在文档完全加载完后执行函数。该事件方法在 <a href="https://www.runoob.com/jquery/jquery-syntax.html">jQuery 语法</a> 章节中已经提到过。</p></li><li><p><strong>click()</strong></p><p>click() 方法是当按钮点击事件被触发时会调用一个函数。</p><p>该函数在用户点击 HTML 元素时执行。</p><p>在下面的实例中，当点击事件在某个 </p><p> 元素上触发时，隐藏当前的 </p><p> 元素：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><strong>dblclick()</strong></p><p>当双击元素时，会发生 dblclick 事件。</p><p>dblclick() 方法触发 dblclick 事件，或规定当发生 dblclick 事件时运行的函数:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dblclick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mouseenter()</strong></p><p>当鼠标指针穿过元素时，会发生 mouseenter 事件。</p><p>mouseenter() 方法触发 mouseenter 事件，或规定当发生 mouseenter 事件时运行的函数：</p></li><li><p><strong>mouseleave()</strong></p><p>当鼠标指针离开元素时，会发生 mouseleave 事件。</p><p>mouseleave() 方法触发 mouseleave 事件，或规定当发生 mouseleave 事件时运行的函数：</p></li><li><p><strong>mousedown()</strong></p><p>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</p><p>mousedown() 方法触发 mousedown 事件，或规定当发生 mousedown 事件时运行的函数：</p></li><li><p><strong>mouseup()</strong></p><p>当在元素上松开鼠标按钮时，会发生 mouseup 事件。</p><p>mouseup() 方法触发 mouseup 事件，或规定当发生 mouseup 事件时运行的函数：</p></li><li><p><strong>hover()</strong></p><p>hover()方法用于模拟光标悬停事件。</p><p>当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你进入了 p1!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"拜拜! 现在你离开了 p1!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>focus()</strong></p><p>当元素获得焦点时，发生 focus 事件。</p><p>当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。</p><p>focus() 方法触发 focus 事件，或规定当发生 focus 事件时运行的函数：</p></li><li><p><strong>blur()</strong></p><p>当元素失去焦点时，发生 blur 事件。</p><p>blur() 方法触发 blur 事件，或规定当发生 blur 事件时运行的函数：</p></li><li><p><strong>keydown()</strong></p><p>在键盘上按下某键时发生,一直按着则会不断触发（opera浏览器除外）, 它返回的是键盘代码;</p></li><li><p><strong>keypress()</strong></p><p>在键盘上按下一个按键，并产生一个字符时发生, 返回ASCII码。注意: <strong>shift、alt、ctrl</strong>等键按下并不会产生字符，所以监听无效 ,换句话说, 只有按下能在屏幕上输出字符的按键时keypress事件才会触发。若一直按着某按键则会不断触发。</p></li><li><p><strong>keyup()</strong></p><p>用户松开某一个按键时触发, 与keydown相对, 返回键盘代码</p></li></ul><h3 id="jQuery-效果"><a href="#jQuery-效果" class="headerlink" title="jQuery 效果"></a>jQuery 效果</h3><h4 id="隐藏-显示"><a href="#隐藏-显示" class="headerlink" title="隐藏/显示"></a>隐藏/显示</h4><h5 id="hide-和show"><a href="#hide-和show" class="headerlink" title="hide()和show()"></a>hide()和show()</h5><p><strong>语法:</strong></p><blockquote><p>$(<em>selector</em>).hide(<em>speed,callback</em>);</p><p>$(<em>selector</em>).show(<em>speed,callback</em>);</p></blockquote><p><strong>说明：</strong></p><blockquote><p>可选的 speed 参数规定隐藏/显示的<strong>速度</strong>，可以取以下值：”slow”、”fast” 或<strong>毫秒</strong>。</p><p>可选的 callback 参数是<strong>隐藏或显示完成后</strong>所执行的函数名称。</p></blockquote><p><strong>实例：</strong></p> <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 130px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".hidebtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"linear"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hide() 方法已完成!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//第二个参数是一个字符串，表示过渡使用哪种缓动函数。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>隐藏及设置回调函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidebtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充说明（也适用于toggle()）：</strong></p><p>对于可选的 callback 参数，有以下3点说明：</p><blockquote><p>1.$(<em>selector</em>)选中的元素的个数为n个，则callback函数会执行n次；</p><p>2.callback函数名后<strong>加括号</strong>，会<strong>立刻执行函数体，而不是等到显示/隐藏完成后才执行</strong>；</p><p>3.callback既可以是函数名，也可以是<strong>匿名函数</strong>(隐藏后执行)；</p></blockquote><h5 id="toggle"><a href="#toggle" class="headerlink" title="toggle()"></a>toggle()</h5><p><strong>语法：</strong></p><blockquote><p>$(<em>selector</em>).toggle(<em>speed,callback</em>);</p></blockquote><p><strong>实例：</strong></p> <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>隐藏/显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个文本段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是另外一个文本段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h4><ul><li><p><strong>fadeIn()</strong> 用于淡入已隐藏的元素</p></li><li><p><strong>fadeOut()</strong> 方法用于淡出可见元素。</p></li><li><p><strong>fadeToggle()</strong> 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换</p></li><li><p><strong>fadeTo()</strong> 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</p></li></ul><p><strong>语法：</strong></p><blockquote><p>$(<em>selector</em>).fadeIn(<em>speed,callback</em>);</p><p>$(<em>selector</em>).fadeOut(<em>speed,callback</em>);</p><p>$(<em>selector</em>).fadeToggle(<em>speed,callback</em>);</p><p>$(<em>selector</em>).fadeTo(<em>speed,opacity,callback</em>);</p></blockquote><p><strong>说明：</strong></p><blockquote><p>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是 fading 完成后所执行的函数名称。</p><p><strong>fadeTo()</strong> 方法必需的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。</p><p><strong>fadeTo()</strong> 方法中必需的 opacity 参数将淡入淡出效果设置为给定的不透明度（值介于 0 与 1 之间）。</p><p>可选的 callback 参数是该函数完成后所执行的函数名称。</p></blockquote><h4 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h4><ul><li><strong>slideDown()</strong> 方法用于向下滑动元素</li><li><strong>slideUp()</strong> 方法用于向上滑动元素</li><li><strong>slideToggle()</strong> 方法可以在 slideDown() 与 slideUp() 方法之间进行切换</li></ul><p><strong>语法：</strong></p><blockquote><p>$(<em>selector</em>).slideDown(<em>speed,callback</em>);</p><p>$(<em>selector</em>).slideUp(<em>speed,callback</em>);</p><p>$(<em>selector</em>).slideToggle(<em>speed,callback</em>);</p></blockquote><h4 id="动画-停止动画（略）"><a href="#动画-停止动画（略）" class="headerlink" title="动画+停止动画（略）"></a>动画+停止动画（略）</h4><h4 id="方法链接"><a href="#方法链接" class="headerlink" title="方法链接"></a>方法链接</h4><p>有一种名为链接（chaining）的技术(使用“点”)，允许我们在相同的元素上运行多条 jQuery 命令，一条接着另一条。这样的话，浏览器就不必多次查找相同的元素。</p><p><strong>实例：</strong></p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="jQuery-HTML"><a href="#jQuery-HTML" class="headerlink" title="jQuery HTML"></a>jQuery HTML</h3><h4 id="获取内容和属性"><a href="#获取内容和属性" class="headerlink" title="获取内容和属性"></a>获取内容和属性</h4><h5 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h5><ul><li><strong>text()</strong> - 设置或返回所选元素的文本内容</li><li><strong>html()</strong> - 设置或返回所选元素的内容（包括 HTML 标记）</li><li><strong>val()</strong> - 设置或返回表单字段的值</li></ul><p><strong>实例：</strong></p> <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Text: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"HTML: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"value: "</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#try"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是段落中的 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>粗体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> 文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>try<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>菜<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示 HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示 value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h5><ul><li><strong>attr():</strong> 对于 HTML 元素我们自己<strong>自定义的</strong> DOM 属性，在处理时，使用 <strong>attr</strong> 方法。如果有相应的属性，返回指定属性值。如果没有相应的属性，返回值是 <strong>undefined</strong>。</li><li><strong>prop():</strong> 对于 HTML 元素本身就带有的<strong>固有属性</strong>，在处理时，使用 <strong>prop</strong> 方法。如果有相应的属性，返回指定属性值。如果没有相应的属性，返回值是<strong>空字符串</strong>。</li></ul><h4 id="设置内容和属性"><a href="#设置内容和属性" class="headerlink" title="设置内容和属性"></a>设置内容和属性</h4><h5 id="设置内容"><a href="#设置内容" class="headerlink" title="设置内容"></a>设置内容</h5><p>我们将使用前一章中的三个相同的方法来设置内容：</p><ul><li><strong>text()</strong> - 设置或返回所选元素的文本内容</li><li><strong>html()</strong> - 设置或返回所选元素的内容（包括 HTML 标记）</li><li><strong>val()</strong> - 设置或返回表单字段的值</li></ul><p>它们拥有<strong>回调函数</strong>。回调函数有两个参数：<strong>被选元素列表中当前元素的下标</strong>，以及<strong>原始（旧的）值</strong>。然后以函数新值返回您希望使用的字符串。</p><p><strong>实例：</strong></p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span>origText</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"旧文本: "</span> <span class="token operator">+</span> origText <span class="token operator">+</span> <span class="token string">" 新文本: Hello world! (index: "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span>origText</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"旧 html: "</span> <span class="token operator">+</span> origText <span class="token operator">+</span> <span class="token string">" 新 html: Hello &lt;b>world!&lt;/b> (index: "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="设置-改变属性值"><a href="#设置-改变属性值" class="headerlink" title="设置/改变属性值"></a>设置/改变属性值</h5><p><strong>attr()</strong> 方法也用于设置/改变属性值，也允许您同时设置多个属性。</p><p><strong>实例：</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#runoob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"href"</span> <span class="token operator">:</span> <span class="token string">"http://www.runoob.com/jquery"</span><span class="token punctuation">,</span>        <span class="token string">"title"</span> <span class="token operator">:</span> <span class="token string">"jQuery 教程"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jQuery 方法<strong>attr()</strong> 方法，也提供回调函数。回调函数有两个参数：<strong>被选元素列表中当前元素的下标</strong>，以及<strong>原始值</strong>(旧的)。然后以函数新值返回您希望使用的字符串。</p><p><strong>实例：</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#runoob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span>origValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> origValue <span class="token operator">+</span> <span class="token string">"/jquery"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加新元素-内容"><a href="#添加新元素-内容" class="headerlink" title="添加新元素/内容"></a>添加新元素/内容</h4><p>用于添加新内容的四个 jQuery 方法：</p><ul><li><strong>append()</strong> - 在被选元素的结尾插入内容（仍然在该元素的内部)</li><li><strong>prepend()</strong> - 在被选元素的开头插入内容</li><li><strong>after()</strong> - 在被选元素之后插入内容</li><li><strong>before()</strong> - 在被选元素之前插入内容</li><li>注意：append/prepend 是在选择元素内部嵌入。after/before 是在元素外面追加。参数可以是个 list:，$(“img”).after([txt1,txt2,txt3]);</li></ul><p><strong>实例：</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>"<span class="token operator">&lt;</span>b<span class="token operator">></span>之前<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"&lt;b>之前&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">"&lt;b>之前&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"&lt;b>之前&lt;/b>"</span><span class="token punctuation">,</span><span class="token string">"&lt;b>之前&lt;/b>"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>如需删除元素和内容，一般可使用以下两个 jQuery 方法：</p><ul><li><strong>remove()</strong> - 删除被选元素（及其子元素）</li><li><strong>empty()</strong> - 从被选元素中删除子元素</li></ul><p>假如你扔掉了一瓶水，那就是 <strong>remove</strong>。</p><p>假如你倒掉了一瓶水，那就是 <strong>empty</strong>。</p><h5 id="过滤被删除的元素"><a href="#过滤被删除的元素" class="headerlink" title="过滤被删除的元素"></a>过滤被删除的元素</h5><p>Query remove() 方法也可接受一个参数，允许您对被删元素进行过滤。</p><p>该参数可以是任何 jQuery 选择器的语法。</p><p>下面的例子删除 class=”italic” 的所有 </p><p> 元素：</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">".italic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除class为xxx的p标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="获取并设置-CSS-类"><a href="#获取并设置-CSS-类" class="headerlink" title="获取并设置 CSS 类"></a>获取并设置 CSS 类</h4><ul><li><strong>addClass()</strong> - 向被选元素添加一个或多个类</li><li><strong>removeClass()</strong> - 从被选元素删除一个或多个类</li><li><strong>toggleClass()</strong> - 对被选元素进行添加/删除类的切换操作</li><li><strong>css()</strong> - 设置或返回样式属性</li></ul><p><strong>实例：</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body div:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"important blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加class = important blue</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h1,h2,p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h1,h2,p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回样式属性</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置属性</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"background-color"</span><span class="token operator">:</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token string">"font-size"</span><span class="token operator">:</span><span class="token string">"200%"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置多个属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h4><p>jQuery 提供多个处理尺寸的重要方法：</p><ul><li><strong>width()</strong> 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。</li><li><strong>height()</strong> 方法设置或返回元素的高度（不包括内边距、边框或外边距）。</li><li><strong>innerWidth()</strong> 方法返回元素的宽度（包括内边距）。</li><li><strong>innerHeight()</strong> 方法返回元素的高度（包括内边距）。</li><li><strong>outerWidth()</strong> 方法返回元素的宽度（包括内边距和边框）。</li><li><strong>outerHeight()</strong>  方法返回元素的高度（包括内边距和边框）。</li></ul><p><img src="https://www.runoob.com/images/img_jquerydim.gif" alt="示意图"></p><h3 id="jQuery-遍历"><a href="#jQuery-遍历" class="headerlink" title="jQuery 遍历"></a>jQuery 遍历</h3><h4 id="jQuery-遍历-祖先"><a href="#jQuery-遍历-祖先" class="headerlink" title="jQuery 遍历 - 祖先"></a>jQuery 遍历 - 祖先</h4><p>这些 jQuery 方法很有用，它们用于向上遍历 DOM 树：</p><ul><li><strong>parent()</strong> 方法返回被选元素的直接父元素。</li><li><strong>parents()</strong> 方法返回被选元素的<strong>所有</strong>祖先元素，它一路向上直到文档的<strong>根元素</strong> (<html>)。也可以使用可选参数来过滤对祖先元素的搜索。</html></li><li><strong>parentsUntil()</strong> 方法返回介于两个给定元素之间（不含填入的那个父元素）的所有祖先元素</li></ul><p><strong>实例：</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回所有 &lt;span> 元素的所有祖先，并且它是 &lt;ul> 元素：</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parentsUntil</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不含div</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jQuery-遍历-后代"><a href="#jQuery-遍历-后代" class="headerlink" title="jQuery 遍历 - 后代"></a>jQuery 遍历 - 后代</h4><p>下面是两个用于向下遍历 DOM 树的 jQuery 方法：</p><ul><li><strong>children()</strong>  方法返回被选元素的<strong>所有直接</strong>子元素。也可以使用可选参数来过滤对子元素的搜索。</li><li><strong>find()</strong>  方法返回被选元素的后代元素，一路向下直到最后一个后代。</li></ul><p><strong>实例：</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"p.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回类名为 "1" 的所有 &lt;p> 元素，并且它们是 &lt;div> 的直接子元素</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回属于 &lt;div> 后代的所有 &lt;span> 元素</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 &lt;div> 的所有后代：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jQuery-遍历-同胞-siblings"><a href="#jQuery-遍历-同胞-siblings" class="headerlink" title="jQuery 遍历 - 同胞(siblings)"></a>jQuery 遍历 - 同胞(siblings)</h4><p>有许多有用的方法让我们在 DOM 树进行水平遍历：</p><ul><li><p><strong>siblings()</strong>  方法返回被选元素的<strong>所有同胞</strong>元素。</p></li><li><p><strong>next()</strong>  方法返回被选元素的<strong>下一个同胞</strong>元素。</p></li><li><p><strong>nextAll()</strong>  方法返回被选元素的<strong>所有跟随的</strong>同胞元素。</p></li><li><p><strong>nextUntil()</strong>  方法返回介于<strong>两个给定参数之间</strong>的所有跟随的同胞元素(不包括两端)。</p></li></ul><hr><ul><li><strong>prev()</strong></li><li><strong>prevAll()</strong></li><li><strong>prevUntil()</strong></li></ul><p>以上，返回的是<strong>前面的</strong>同胞元素（在 DOM 树中沿着同胞之前元素遍历，而不是之后元素遍历）。</p><p><strong>实例</strong>：</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 &lt;h2> 的所有同胞元素：</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回属于 &lt;h2> 的同胞元素的所有 &lt;p> 元素：</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 &lt;h2> 的下一个同胞元素：</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 &lt;h2> 的所有跟随的同胞元素：</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextUntil</span><span class="token punctuation">(</span><span class="token string">"h6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回介于 &lt;h2> 与 &lt;h6> 元素之间的所有同胞元素：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jQuery-遍历-过滤"><a href="#jQuery-遍历-过滤" class="headerlink" title="jQuery 遍历- 过滤"></a>jQuery 遍历- 过滤</h4><p>三个最基本的过滤方法是</p><ul><li><strong>first()</strong></li><li><strong>last()</strong></li><li><strong>eq()</strong></li></ul><p>它们允许您基于其在一组元素中的位置来选择一个特定的元素。</p><p>其他过滤方法，比如 <strong>filter() 和 not()</strong> 允许您选取匹配或不匹配某项指定标准的元素。</p><ul><li><strong>first()</strong>  方法返回被选元素的首个元素</li><li><strong>last()</strong>  方法返回被选元素的最后一个元素。</li><li><strong>eq()</strong>  方法返回被选元素中带有指定索引号的元素。<strong>索引号从 0 开始</strong>，因此首个元素的索引号是 0 而不是 1。</li><li><strong>filter()</strong> 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，<strong>匹配的元素会被返回</strong>。</li><li><strong>not()</strong>  方法返回不匹配标准的所有元素。not() 方法与 filter() 相反。</li></ul><p><strong>实例：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选取首个 &lt;div> 元素内部的第一个 &lt;p> 元素：</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选取第二个 &lt;p> 元素（索引号 1）</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">".url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回带有类名 "url" 的所有 &lt;p> 元素：</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token string">".url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回不带有类名 "url" 的所有 &lt;p> 元素：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jQuery-AJAX"><a href="#jQuery-AJAX" class="headerlink" title="jQuery - AJAX"></a>jQuery - AJAX</h3><h4 id="jQuery-AJAX-load-方法"><a href="#jQuery-AJAX-load-方法" class="headerlink" title="jQuery - AJAX load() 方法"></a>jQuery - AJAX load() 方法</h4><p>jQuery <strong>load()</strong> 方法是简单但强大的 AJAX 方法。</p><p><strong>load()</strong> 方法从服务器加载数据，并把返回的数据放入被选元素中。</p><p><strong>语法：</strong></p><blockquote><p><strong>$(selector).load(URL,data,callback);</strong></p></blockquote><p><strong>说明：</strong></p><blockquote><p>必需的 <em>URL</em> 参数规定您希望加载的 URL。</p><p>可选的 <em>data</em> 参数规定与请求一同发送的查询字符串键/值对集合。</p><p>可选的 <em>callback</em> 参数是 load() 方法<strong>完成后</strong>所执行的函数名称。</p></blockquote><p><strong>实例：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/demo_test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>使用 jQuery AJAX 修改文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>获取外部内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以<strong>把 jQuery 选择器</strong>添加到 URL 参数。</p><p>下面的例子把 “demo_test.txt” 文件中 id=”p1” 的元素的内容，加载到指定的 <div> 元素中：</div></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/demo_test.txt #p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>使用 jQuery AJAX 修改文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>获取外部文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jQuery-AJAX-get-和-post-方法"><a href="#jQuery-AJAX-get-和-post-方法" class="headerlink" title="jQuery - AJAX get() 和 post() 方法"></a>jQuery - AJAX get() 和 post() 方法</h4><p>jQuery <strong>get()</strong> 和 <strong>post()</strong> 方法用于通过 HTTP GET 或 POST 请求从服务器请求数据。</p><h5 id="GET-和-POST-方法的区别："><a href="#GET-和-POST-方法的区别：" class="headerlink" title="GET 和 POST 方法的区别："></a><strong>GET 和 POST 方法的区别</strong>：</h5><p><strong>1、发送的数据数量</strong></p><p>在 GET 中，<strong>只能发送有限数量的数据</strong>，因为数据是<strong>在 URL 中发送</strong>的。</p><p>在 POST 中，<strong>可以发送大量的数据，因为数据是在正文主体中发送的</strong>。</p><p><strong>2、安全性</strong></p><p>GET 方法发送的数据<strong>不受保护</strong>，因为数据在 URL 栏中公开，这增加了漏洞和黑客攻击的风险。</p><p>POST 方法发送的数据是安全的，因为数据未在 URL 栏中公开，还<strong>可以在其中使用多种编码技术</strong>，这使其具有弹性。</p><p><strong>3、加入书签中</strong></p><p><strong>GET 查询的结果可以加入书签中</strong>，因为它以 URL 的形式存在；而 POST 查询的结果无法加入书签中。</p><p><strong>4、编码</strong></p><p>在表单中使用 GET 方法时，数据类型中<strong>只接受 ASCII 字符</strong>。</p><p>在表单提交时，<strong>POST 方法不绑定表单数据类型</strong>，并允许二进制和 ASCII 字符。</p><p><strong>5、可变大小</strong></p><p>GET 方法中的<strong>可变大小约为 2000 个字符</strong>。</p><p>POST 方法<strong>最多允许 8 Mb 的可变大小</strong>。</p><p><strong>6、缓存</strong></p><p><strong>GET 方法的数据是可缓存的</strong>，而 POST 方法的数据是<strong>无法缓存</strong>的。</p><p><strong>7、主要作用</strong></p><p>GET 方法主要用于<strong>获取信息</strong>。而 POST 方法主要用于<strong>更新数据</strong>。</p><h5 id="jQuery-get-方法"><a href="#jQuery-get-方法" class="headerlink" title="jQuery $.get() 方法"></a>jQuery $.get() 方法</h5><p><strong>$.get()</strong> 方法通过 HTTP GET 请求从服务器上请求数据。</p><p><strong>语法：</strong></p><blockquote><p>$.get(<em>URL</em>,<em>callback</em>);</p></blockquote><p><strong>说明：</strong></p><blockquote><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的回调函数。第一个回调参数存有被请求页面的内容，第二个回调参数存有请求的状态。</p></blockquote><p><strong>实例：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/demo_test.php"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>status</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>发送一个 HTTP GET 请求并获取返回结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="jQuery-post-方法"><a href="#jQuery-post-方法" class="headerlink" title="jQuery $.post() 方法"></a>jQuery $.post() 方法</h5><p><strong>$.post()</strong> 方法通过 HTTP POST 请求向服务器提交数据。</p><p><strong>语法：</strong></p><blockquote><p>$.post(<em>URL,data,callback</em>);</p></blockquote><p><strong>说明：</strong></p><blockquote><p>必需的 <em>URL</em> 参数规定您希望请求的 URL。</p><p>可选的 <em>data</em> 参数规定连同请求发送的数据。</p><p>可选的 <em>callback</em> 参数是请求成功后所执行的函数名。第一个回调参数存有被请求页面的内容，而第二个参数存有请求的状态。</p></blockquote><p><strong>实例：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/demo_test_post.php"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span>url<span class="token operator">:</span><span class="token string">"http://www.runoob.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>status</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据: \n"</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">"\n状态: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>发送一个 HTTP POST 请求页面并获取返回内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jQuery-其他"><a href="#jQuery-其他" class="headerlink" title="jQuery 其他"></a>jQuery 其他</h3><h4 id="jQuery-noConflict-方法"><a href="#jQuery-noConflict-方法" class="headerlink" title="jQuery - noConflict() 方法"></a>jQuery - noConflict() 方法</h4><p><strong>如果其他 JavaScript 框架也使用 $ 符号作为简写怎么办？</strong></p><p><strong>noConflict()</strong> 方法会释放对 $ 标识符的控制，这样其他脚本就可以使用它了。</p><p>当然，您仍然可以通过全名替代简写的方式来使用 jQuery：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> jq <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放对 $ 标识符的控制</span><span class="token function">jq</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">jq</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">jq</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"jQuery 仍然在工作!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Record </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="2021/03/16/wei-yun-suan/"/>
      <url>2021/03/16/wei-yun-suan/</url>
      
        <content type="html"><![CDATA[<h3 id="C-位运算的一些知识点"><a href="#C-位运算的一些知识点" class="headerlink" title="C++位运算的一些知识点"></a>C++位运算的一些知识点</h3><blockquote><p><a href="https://leetcode-cn.com/problems/minimum-flips-to-make-a-or-b-equal-to-c/"><a href="https://leetcode-cn.com/problems/minimum-flips-to-make-a-or-b-equal-to-c/">1318. 或运算的最小翻转次数</a></a></p></blockquote><p>一些位运算的知识：</p><ul><li><p>对于十进制整数<code> x</code>，我们可以用 <code>x &amp; 1</code> 得到 <code>x </code>的二进制表示的最低位，它等价于 <code>x % 2</code>。（<code>&amp;</code>是与运算，任何数字的二进制和<code>0000001</code>与运算之后得到的是最后一位的数字，因为0与1为0，1与1为1。）</p><ul><li><p>例如当 <code>x = 3</code> 时，<code>x </code>的二进制表示为 <code>11</code>，<code>x &amp; 1</code> 的值为 <code>1</code>；</p></li><li><p>例如当 <code>x = 6</code> 时，<code>x </code>的二进制表示为 <code>110</code>，<code>x &amp; 1</code> 的值为 <code>0</code>。</p></li></ul></li><li><p>对于十进制整数 <code>x</code>，我们可以用 <code>x &amp; (1 &lt;&lt; k) </code>来判断 <code>x </code>二进制表示的第<code>k</code>位（最低位为第 <code>0 </code>位）是否为<code> 1</code>。如果该表达式的值大于零，那么第 <code>k </code>位为 1：</p><ul><li><p>例如当 <code>x = 3</code> 时，<code>x</code> 的二进制表示为 <code>11</code>，<code>x &amp; (1 &lt;&lt; 1) = 11 &amp; 10 = 10 &gt; 0</code>，说明第 <code>1</code> 位为 <code>1</code>；</p></li><li><p>例如当 <code>x = 5</code> 时，<code>x</code> 的二进制表示为 <code>101</code>，<code>x &amp; (1 &lt;&lt; 1) = 101 &amp; 10 = 0</code>，说明第 <code>1</code> 位不为 <code>1</code>。</p></li></ul></li><li><p>对于十进制整数 <code>x</code>，我们可以用 <code>(x &gt;&gt; k) &amp; 1</code> 得到 <code>x</code> 二进制表示的第 <code>k </code>位（最低位为第 <code>0 </code>位）。如果 <code>x</code> 二进制表示的位数小于 <code>k</code>，那么该表达式的值为零：</p><ul><li><p>例如当 <code>x = 3</code> 时，x 的二进制表示为 <code>11</code>，<code>(x &gt;&gt; 1) &amp; 1 = 1 &amp; 1 = 1</code>，说明第 <code>1</code> 位为 <code>1</code>；</p></li><li><p>例如当 <code>x = 5 </code>时，x 的二进制表示为 <code>101</code>，<code>(x &gt;&gt; 1) &amp; 1 = 10 &amp; 1 = 0</code>，说明第 <code>1</code> 位为 <code>0</code>。</p></li><li><p>例如当 <code>x = 6</code> 时，x 的二进制表示为 <code>110</code>，<code>(x &gt;&gt; 3) &amp; 1 = 0 &amp; 1 = 0</code>，说明第 <code>3</code> 位为 <code>0</code>。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell-chapter1-入门</title>
      <link href="2021/03/14/shell-chapter1-ru-men/"/>
      <url>2021/03/14/shell-chapter1-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-chapter1-入门"><a href="#Shell-chapter1-入门" class="headerlink" title="Shell-chapter1-入门"></a>Shell-chapter1-入门</h1><p>本文参考：<a href="https://github.com/52fhy/shell-book">52fhy的仓库</a>、<a href="https://www.runoob.com/linux/linux-shell.html">菜鸟教程</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Shell是一种脚本语言，那么，就必须有解释器来执行这些脚本。</p></blockquote><p>Unix/Linux上常见的Shell脚本解释器有bash、sh、csh、ksh等，习惯上把它们称作一种Shell。我们常说有多少种Shell，其实说的是Shell脚本解释器。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>打开文本编辑器，新建一个文件<code>test.sh</code>，扩展名为<code>.sh</code>（sh代表shell）。</p><p>输入一些代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello World !"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在命令行运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x test.sh./test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello World <span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即<strong>使用哪一种Shell</strong>。<code>echo</code>命令用于向窗口输出文本。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>以<code>#</code>开头的行就是注释，会被解释器忽略。sh里没有多行注释，只能每一行加一个#号。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># --------</span><span class="token comment"># 这是注释块</span><span class="token comment"># --------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h2><p><strong>echo</strong>： 是Shell的一个内部指令，用于在屏幕上打印出指定的字符串。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> arg <span class="token builtin class-name">echo</span> arg <span class="token operator">></span> myfile <span class="token comment">#显示结果重定向至文件，会生成myfile文件</span><span class="token builtin class-name">echo</span> -e arg <span class="token comment">#执行arg里的转义字符。echo加了-e默认会换行</span><span class="token builtin class-name">echo</span> -e <span class="token string">"a<span class="token entity" title="\n">\n</span>b"</span> <span class="token comment">#转义\n换行</span><span class="token builtin class-name">echo</span> -e <span class="token string">"ab<span class="token entity" title="\c">\c</span>"</span> <span class="token comment">#转义\c不换行，即会输出abo</span><span class="token builtin class-name">echo</span> -e <span class="token string">"o"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，echo后单引号和双引号作用是不同的。<strong>单引号不能转义里面的字符</strong>。双引号可有可无，<strong>单引号主要用在原样输出中</strong>。</p><p><strong>printf</strong>：格式化输出语句。<br><code>printf</code> 命令用于格式化输出， 是<code>echo</code>命令的增强版。它是C语言<code>printf()</code>库函数的一个有限的变形，并且在语法上有些不同。</p><p>如同 <code>echo</code> 命令，<code>printf</code> 命令也可以输出简单的字符串:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">"hello<span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>printf</code> 不像 <code>echo</code> 那样会自动换行，必须显式添加换行符(\n)。</p><p>注意：<code>printf</code> 由 POSIX 标准所定义，移植性要比 <code>echo</code> 好。</p><p>printf 命令的语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span>  format-string  <span class="token punctuation">[</span>arguments<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment">#format-string 为格式控制字符串，arguments 为参数列表。功能和用法与c语言的 printf 命令类似。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里仅说明与C语言printf()函数的不同：</p><ul><li>printf 命令<strong>不用加括号</strong></li><li>format-string 可以没有引号，但最好加上，单引号双引号均可。</li><li><strong>参数比格式控制符(%)多时，格式控制符可以重用</strong>，可以将所有剩下的参数都转换。</li><li>arguments 使用<strong>空格分隔，不用逗号</strong>。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 双引号</span><span class="token builtin class-name">printf</span> <span class="token string">"%d %s<span class="token entity" title="\n">\n</span>"</span> <span class="token number">10</span> <span class="token string">"abc"</span><span class="token number">10</span> abc<span class="token comment"># 单引号与双引号效果一样 </span><span class="token builtin class-name">printf</span> <span class="token string">'%d %s<span class="token entity" title="\n">\n</span>'</span> <span class="token number">10</span> <span class="token string">"abc"</span> <span class="token number">10</span> abc<span class="token comment"># 没有引号也可以输出</span><span class="token builtin class-name">printf</span> %s abcabc<span class="token comment"># 但是下面的会出错：</span><span class="token builtin class-name">printf</span> %d %s <span class="token number">10</span> abc <span class="token comment">#因为系统分不清楚哪个是参数，这时候最好加引号了。</span><span class="token comment"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span>$ <span class="token builtin class-name">printf</span> %s a b cabc$ <span class="token builtin class-name">printf</span> <span class="token string">"%s<span class="token entity" title="\n">\n</span>"</span> a b cabc<span class="token comment"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span>$ <span class="token builtin class-name">printf</span> <span class="token string">"%s and %d <span class="token entity" title="\n">\n</span>"</span> and <span class="token number">0</span><span class="token comment"># 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0</span>$ <span class="token builtin class-name">printf</span> <span class="token string">"The first program always prints'%s,%d<span class="token entity" title="\n">\n</span>'"</span> Hello Shell-bash: printf: Shell: invalid numberThe first program always prints <span class="token string">'Hello,0'</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>read</strong>： 命令行从输入设备读入内容；一个一个词组地接收输入的参数，每个词组需要<strong>使用空格</strong>进行分隔；如果输入的词组个数大于需要的参数个数，则<strong>多出的词组将被作为整体为最后一个参数接收</strong>。</p><p>read的部分参数：</p><ul><li><strong>-p</strong> 输入提示文字</li><li><strong>-n</strong> 输入字符长度限制(达到6位，自动结束)</li><li><strong>-t</strong> 输入限时</li><li><strong>-s</strong> 隐藏输入内容</li></ul><p>测试文件 test.sh 代码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">read</span> -p <span class="token string">"请输入一段文字:"</span> -n <span class="token number">6</span> -t <span class="token number">5</span> -s password<span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\n">\n</span>password is <span class="token variable">$password</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x test.sh./test.sh<span class="token punctuation">[</span>root@VM-8-2-centos test_shell<span class="token punctuation">]</span><span class="token comment"># ./test.sh</span>请输入一段文字:password is 123qw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>Shell支持自定义变量。</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p><strong>定义变量时</strong>，变量名不加美元符号（$），如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">variableName</span><span class="token operator">=</span><span class="token string">"value"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，<strong>变量名和等号之间不能有空格</strong>，这可能和你熟悉的所有编程语言都不一样。<strong>有空格会出错</strong>。</p><p>同时，变量名的命名须遵循如下规则：</p><ul><li>首个字符必须为字母（a-z，A-Z）。</li><li><strong>中间不能有空格</strong>，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>变量定义举例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">myUrl</span><span class="token operator">=</span><span class="token string">"lalal"</span><span class="token assign-left variable">myNum</span><span class="token operator">=</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：变量中间不能有空格，如果手误写错(例如 <code>var = test</code>)，刚好要使用<code>rm -rf $var/</code>删除这个目录，实际删除的是<code>/</code>！</p></blockquote><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号（$）即可，如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">your_name</span><span class="token operator">=</span><span class="token string">"lalal"</span><span class="token builtin class-name">echo</span> <span class="token variable">$your_name</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;your_name&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>变量名外面的花括号是可选的</strong>，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">skill</span> <span class="token keyword">in</span> C PHP Python Java <span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"I am good at <span class="token variable">$&#123;skill&#125;</span>Script"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果不给skill变量加花括号，写成<code>echo &quot;I am good at $skillScript&quot;</code>，解释器就会把<code>$skillScript</code>当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p><strong>推荐给所有变量加上花括号，这是个好的编程习惯。</strong></p><blockquote><p>已定义的变量，可以被重新定义。</p></blockquote><p>在变量前面加<code>readonly</code> 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span><span class="token builtin class-name">readonly</span> url<span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 <code>unset</code> 命令可以删除变量。语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> variable_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变量被删除后不能再次使用；<strong>unset 命令不能删除只读变量</strong>。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>运行shell时，会同时存在三种变量：<br><strong>1) 局部变量</strong><br>局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p><p><strong>2) 环境变量</strong><br>所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</p><p><strong>3) shell变量</strong><br>shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行。</p><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><p>前面已经讲到，<strong>变量名只能包含数字、字母和下划线</strong>，因为某些包含其他字符的变量有特殊含义，这样的变量被称为<strong>特殊变量</strong>。</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td><code>$0</code></td><td>当前脚本(函数)的文件名(函数名)</td></tr><tr><td><code>$n</code></td><td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是<code>$1</code>，第二个参数是<code>$2</code>。</td></tr><tr><td><code>$#</code></td><td>传递给脚本或函数的参数个数。</td></tr><tr><td><code>$*</code></td><td>传递给脚本或函数的所有参数。</td></tr><tr><td><code>$@</code></td><td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 <code>$*</code> 稍有不同</td></tr><tr><td><code>$?</code></td><td>上个命令的<strong>退出状态</strong>，或函数的返回值。</td></tr><tr><td><code>$$</code></td><td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"File Name: <span class="token variable">$0</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"First Parameter : <span class="token variable">$1</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Second Parameter : <span class="token variable">$2</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Quoted Values: <span class="token variable">$@</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Quoted Values: <span class="token variable">$*</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Total Number of Parameters : <span class="token variable">$#</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./test.sh Zara AliFile Name <span class="token builtin class-name">:</span> ./test.shFirst Parameter <span class="token builtin class-name">:</span> ZaraSecond Parameter <span class="token builtin class-name">:</span> AliQuoted Values: Zara AliQuoted Values: Zara AliTotal Number of Parameters <span class="token builtin class-name">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$* 和 $@ 的区别"></a><code>$*</code> 和 <code>$@</code> 的区别</h3><p><code>$*</code> 和 <code>$@</code> 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。</p><p>但是当它们被双引号(“ “)包含时，”<code>$*</code>“ 会将所有的参数作为一个整体，以”<code>$1 $2 … $n</code>“的形式输出所有参数；”<code>$@</code>“ 会将各个参数分开，以<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code> 的形式输出所有参数。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"\<span class="token variable">$*</span>="</span> <span class="token variable">$*</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token entity" title="\&quot;">\"</span>\<span class="token variable">$*</span><span class="token entity" title="\&quot;">\"</span>="</span> <span class="token string">"<span class="token variable">$*</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"\<span class="token variable">$@</span>="</span> <span class="token variable">$@</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token entity" title="\&quot;">\"</span>\<span class="token variable">$@</span><span class="token entity" title="\&quot;">\"</span>="</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"print each param from \<span class="token variable">$*</span>"</span><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> <span class="token variable">$*</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$var</span>"</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"print each param from \<span class="token variable">$@</span>"</span><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$var</span>"</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"print each param from <span class="token entity" title="\&quot;">\"</span>\<span class="token variable">$*</span><span class="token entity" title="\&quot;">\"</span>"</span><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$var</span>"</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"print each param from <span class="token entity" title="\&quot;">\"</span>\<span class="token variable">$@</span><span class="token entity" title="\&quot;">\"</span>"</span><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$var</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>./test.sh &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;</code>，看到下面的结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$*</span><span class="token operator">=</span>  a b c d<span class="token string">"<span class="token variable">$*</span>"</span><span class="token operator">=</span> a b c d<span class="token variable">$@</span><span class="token operator">=</span>  a b c d<span class="token string">"<span class="token variable">$@</span>"</span><span class="token operator">=</span> a b c dprint each param from <span class="token variable">$*</span>abcdprint each param from <span class="token variable">$@</span>abcdprint each param from <span class="token string">"<span class="token variable">$*</span>"</span>a b c dprint each param from <span class="token string">"<span class="token variable">$@</span>"</span>abcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h3><p><code>$?</code> 可以获取上一个命令的退出状态。<strong>所谓退出状态，就是上一个命令执行后的返回结果</strong>。如果上一条命令是执行某个函数：如果这个函数有返回值，<code>$?</code>获取该返回值；若没有返回值，<code>$?</code>获取函数最后一条命令的结果。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"error"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</p><p>不过，也有一些命令返回其他值，表示不同类型的错误。</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">转义字符含义<span class="token punctuation">\</span><span class="token punctuation">\</span>反斜杠<span class="token punctuation">\</span>a警报，响铃<span class="token punctuation">\</span>b退格（删除键）<span class="token punctuation">\</span>f换页<span class="token punctuation">(</span>FF<span class="token punctuation">)</span>，将当前位置移到下页开头<span class="token punctuation">\</span>n换行<span class="token punctuation">\</span>r回车<span class="token punctuation">\</span>t水平制表符（tab键） <span class="token punctuation">\</span>v垂直制表符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>shell默认是不转义上面的字符的。需要加<code>-e</code>选项。</strong></p><p>举个例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">11</span><span class="token builtin class-name">echo</span> -e <span class="token string">"a is <span class="token variable">$a</span> <span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a is <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里 <code>-e</code> 表示对转义字符进行替换。如果不使用 <code>-e</code> 选项，将会原样输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a is <span class="token number">11</span><span class="token punctuation">\</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用 echo 命令的 <code>-E</code> 选项禁止转义，默认也是不转义的；使用 <code>-n</code> 选项可以禁止插入换行符。</p><h2 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h2><p>命令替换是指Shell可以先执行命令，将输出结果暂时保存，在适当的地方输出。</p><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">command</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意是反引号，不是单引号，这个键位于 Esc 键下方。</strong></p><p>下面的例子中，将命令执行结果保存在变量中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"Date is <span class="token variable">$DATE</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h2><p>变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值。</p><p>可以使用的变量替换形式：</p><table><thead><tr><th>形式</th><th>说明</th></tr></thead><tbody><tr><td><code>$&#123;var&#125;</code></td><td>变量本来的值</td></tr><tr><td><code>$&#123;var:-word&#125;</code></td><td>如果变量 <code>var</code> 为空或已被删除(unset)，那么返回 word，但不改变 <code>var</code> 的值。</td></tr><tr><td><code>$&#123;var:=word&#125;</code></td><td>如果变量 <code>var</code> 为空或已被删除(unset)，那么返回 word，并将 <code>var</code> 的值设置为 word。</td></tr><tr><td><code>$&#123;var:?message&#125;</code></td><td>如果变量 <code>var</code> 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 <code>var</code> 是否可以被正常赋值。若此替换出现在Shell脚本中，那么脚本将停止运行。</td></tr><tr><td><code>$&#123;var:+word&#125;</code></td><td>如果变量 <code>var</code> 被定义，那么返回 word，但不改变 var 的值。</td></tr></tbody></table><h2 id="一个完整的shell示例"><a href="#一个完整的shell示例" class="headerlink" title="一个完整的shell示例"></a>一个完整的shell示例</h2><p>下面的脚本用于php安装过程中安装zip扩展。</p><p><code>php_zip_ins.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#zip install</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -d php-5.4.25/ext/zip <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token builtin class-name">cd</span> php-5.4.25/ext/zip<span class="token keyword">else</span><span class="token function">tar</span> zxvf php-5.4.25.tar.gz<span class="token builtin class-name">cd</span> php-5.4.25/ext/zip<span class="token keyword">fi</span>/usr/local/php/bin/phpize./configure --with-php-config<span class="token operator">=</span>/usr/local/php/bin/php-config<span class="token function">make</span><span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span><span class="token function">make</span> <span class="token function">install</span><span class="token builtin class-name">echo</span> <span class="token function">grep</span> <span class="token string">'no-debug-zts-20100525'</span> /usr/local/php/etc/php.ini<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">''</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini        <span class="token builtin class-name">echo</span> <span class="token string">'extension_dir=/usr/local/php/lib/php/extensions/no-debug-zts-20100525'</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini<span class="token keyword">fi</span><span class="token function">grep</span> <span class="token string">'zip.so'</span> /usr/local/php/etc/php.ini<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">'extension=zip.so'</span> <span class="token operator">>></span> /usr/local/php/etc/php.ini<span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">"zip install is OK"</span>/usr/local/apache2/bin/apachectl restart<span class="token builtin class-name">cd</span> -<span class="token function">rm</span> -rf php-5.4.25<span class="token builtin class-name">echo</span> <span class="token string">"all ok!"</span><span class="token function">ls</span> /usr/local/php/lib/php/extensions/no-debug-zts-20100525/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell-chapter2-运算符</title>
      <link href="2021/03/14/shell-chapter2-yun-suan-fu/"/>
      <url>2021/03/14/shell-chapter2-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-chapter2-运算符"><a href="#Shell-chapter2-运算符" class="headerlink" title="Shell-chapter2-运算符"></a>Shell-chapter2-运算符</h1><p>本文参考：<a href="https://github.com/52fhy/shell-book">52fhy的仓库</a>、<a href="https://www.runoob.com/linux/linux-shell.html">菜鸟教程</a></p><h2 id="Shell运算符"><a href="#Shell运算符" class="headerlink" title="Shell运算符"></a>Shell运算符</h2><p>Bash 支持很多运算符，包括算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试运算符。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p><strong>原生bash不支持</strong>简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p><p><code>expr</code> 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令行直接计算</span><span class="token function">expr</span> <span class="token number">2</span> + <span class="token number">2</span>   <span class="token comment">#4</span><span class="token function">expr</span> <span class="token number">3</span> - <span class="token number">2</span>   <span class="token comment">#1</span><span class="token function">expr</span> <span class="token number">3</span> / <span class="token number">2</span>   <span class="token comment">#1</span><span class="token function">expr</span> <span class="token number">3</span> <span class="token punctuation">\</span>* <span class="token number">2</span>   <span class="token comment">#6</span><span class="token comment"># 使用表达式</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"a + b : <span class="token variable">$val</span>"</span><span class="token comment">#其他写法：</span><span class="token assign-left variable">val_1</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span> <span class="token punctuation">\</span>* $<span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"a * b : <span class="token variable">$val_1</span>"</span><span class="token assign-left variable">val_2</span><span class="token operator">=</span>$<span class="token punctuation">[</span>a*b<span class="token punctuation">]</span><span class="token builtin class-name">echo</span> <span class="token string">"a * b : <span class="token variable">$val_2</span>"</span><span class="token assign-left variable">val_3</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>a<span class="token operator">*</span>b<span class="token variable">))</span></span><span class="token builtin class-name">echo</span> <span class="token string">"a * b : <span class="token variable">$val_3</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li><strong>表达式和运算符之间要有空格</strong>，例如 <code>2+2</code> 是不对的，必须写成 <code>2 + 2</code>，这与我们熟悉的大多数编程语言不一样。</li><li><code>乘号</code>前边<strong>必须加反斜杠</strong>才能实现乘法运算(<strong>针对使用反引号的写法</strong>)</li><li>完整的表达式要被<strong>反引号</strong>包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li></ul><p><strong>算术运算符列表</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">运算符  说明    举例+    加法<span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span> 结果为 <span class="token number">30</span>。-   减法<span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a - $b<span class="token variable">`</span></span> 结果为 <span class="token number">10</span>。*    乘法<span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span>* $b<span class="token variable">`</span></span> 结果为  <span class="token number">200</span>。/    除法<span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $b / $a<span class="token variable">`</span></span> 结果为 <span class="token number">2</span>。%    取余<span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $b % $a<span class="token variable">`</span></span> 结果为 <span class="token number">0</span>。<span class="token operator">=</span>    赋值<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable">$b</span> 将把变量 b 的值赋给 a。<span class="token operator">==</span>    相等。用于比较两个数字，相同则返回 true。<span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> 返回 false。<span class="token operator">!=</span>    不相等。用于比较两个数字，不相同则返回 true。<span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> 返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span> -eq <span class="token variable">$b</span> : a is equal to b"</span><span class="token keyword">else</span>   <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span> -eq <span class="token variable">$b</span>: a is not equal to b"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缩成一行可以这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span> -eq <span class="token variable">$b</span> : a is equal to b"</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span> -eq <span class="token variable">$b</span>: a is not equal to b"</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里缩写，主要是为了让大家注意：</p><ul><li>if后面直到then前面的分号结束，<strong>都是有空格</strong>的: <code>if [ $a -eq $b ]</code></li></ul><p><strong>关系运算符列表</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">运算符  说明-eq    检测两个数是否相等，相等返回 true。同算数运算符<span class="token variable"><span class="token variable">`</span><span class="token operator">==</span><span class="token variable">`</span></span>-ne    检测两个数是否相等，不相等返回 <span class="token boolean">true</span>-gt检测左边的数是否大于右边的，如果是，则返回 true。-lt检测左边的数是否小于右边的，如果是，则返回 true。-ge检测左边的数是否大等于右边的，如果是，则返回 true。-le检测左边的数是否小于等于右边的，如果是，则返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><p><strong>布尔运算符列表</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">运算符  说明<span class="token operator">!</span>非运算，表达式为 <span class="token boolean">true</span> 则返回 false，否则返回 true。-o或运算<span class="token punctuation">(</span>or<span class="token punctuation">)</span>，有一个表达式为 <span class="token boolean">true</span> 则返回 true。-a与运算<span class="token punctuation">(</span>and<span class="token punctuation">)</span>，两个表达式都为 <span class="token boolean">true</span> 才返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token number">3</span> -eq <span class="token number">3</span> -a <span class="token number">3</span> -lt <span class="token number">5</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">'ok'</span><span class="token keyword">fi</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p><strong>字符串运算符列表</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">运算符说明举例<span class="token operator">=</span>检测两个字符串是否相等，相等返回 true。<span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> 返回 false。<span class="token operator">!=</span>检测两个字符串是否相等，不相等返回 true。<span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> 返回 true。-z检测字符串长度是否为0，为0返回 true。<span class="token punctuation">[</span> -z <span class="token variable">$a</span> <span class="token punctuation">]</span> 返回 false。-n检测字符串长度是否为0，不为0返回 true。<span class="token punctuation">[</span> -n <span class="token variable">$a</span> <span class="token punctuation">]</span> 返回 true。$检测字符串是否为空，不为空返回 true。<span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token punctuation">]</span> 返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">"/tmp/test.sh"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -e <span class="token variable">$file</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"File exists"</span><span class="token keyword">else</span>   <span class="token builtin class-name">echo</span> <span class="token string">"File does not exist"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件测试运算符列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">操作符  说明举例-b <span class="token function">file</span>检测文件是否是块设备文件，如果是，则返回 true。<span class="token punctuation">[</span> -b <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-c <span class="token function">file</span>检测文件是否是字符设备文件，如果是，则返回 true。<span class="token punctuation">[</span> -c <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-d <span class="token function">file</span>检测文件是否是目录，如果是，则返回 true。<span class="token punctuation">[</span> -d <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-f <span class="token function">file</span>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。<span class="token punctuation">[</span> -f <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-g <span class="token function">file</span>检测文件是否设置了 SGID 位，如果是，则返回 true。<span class="token punctuation">[</span> -g <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-k <span class="token function">file</span>检测文件是否设置了粘着位<span class="token punctuation">(</span>Sticky Bit<span class="token punctuation">)</span>，如果是，则返回 true。<span class="token punctuation">[</span> -k <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-p <span class="token function">file</span>检测文件是否是具名管道，如果是，则返回 true。<span class="token punctuation">[</span> -p <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-u <span class="token function">file</span>检测文件是否设置了 SUID 位，如果是，则返回 true。<span class="token punctuation">[</span> -u <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 false。-r <span class="token function">file</span>检测文件是否可读，如果是，则返回 true。<span class="token punctuation">[</span> -r <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-w <span class="token function">file</span>检测文件是否可写，如果是，则返回 true。<span class="token punctuation">[</span> -w <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-x <span class="token function">file</span>检测文件是否可执行，如果是，则返回 true。<span class="token punctuation">[</span> -x <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-s <span class="token function">file</span>检测文件是否为空（文件大小是否大于0），不为空返回 true。<span class="token punctuation">[</span> -s <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。-e <span class="token function">file</span>检测文件（包括目录）是否存在，如果是，则返回 true。<span class="token punctuation">[</span> -e <span class="token variable">$file</span> <span class="token punctuation">]</span> 返回 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell-chapter3-字符串和数组</title>
      <link href="2021/03/14/shell-chapter3-zi-fu-chuan-he-shu-zu/"/>
      <url>2021/03/14/shell-chapter3-zi-fu-chuan-he-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-chapter3-字符串和数组"><a href="#Shell-chapter3-字符串和数组" class="headerlink" title="Shell-chapter3-字符串和数组"></a>Shell-chapter3-字符串和数组</h1><p>本文参考：<a href="https://github.com/52fhy/shell-book">52fhy的仓库</a>、<a href="https://www.runoob.com/linux/linux-shell.html">菜鸟教程</a></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似：</p><p>单双引号的区别：</p><ul><li>双引号里可以有变量，单引号则原样输出；</li><li>双引号里可以出现转义字符，单引号则原样输出；</li><li>单引号字串中不能出现单引号。</li></ul><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>计算字符长度也可是使用 <strong>length</strong>，string字符串里边有空格，所以需要添加双引号。使用<code>#</code>也可以</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"hello,everyone my name is xiaoming"</span><span class="token function">expr</span> length <span class="token string">"<span class="token variable">$string</span>"</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>string&#125;</span><span class="token comment"># 输出34 34</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">str1</span><span class="token operator">=</span><span class="token string">'i'</span><span class="token assign-left variable">str2</span><span class="token operator">=</span><span class="token string">'love'</span><span class="token assign-left variable">str3</span><span class="token operator">=</span><span class="token string">'you'</span><span class="token builtin class-name">echo</span> <span class="token variable">$str1</span> <span class="token variable">$str2</span> <span class="token variable">$str3</span><span class="token builtin class-name">echo</span> <span class="token variable">$str1</span><span class="token variable">$str2</span><span class="token variable">$str3</span><span class="token builtin class-name">echo</span> <span class="token variable">$str1</span>,<span class="token variable">$str2</span>,<span class="token variable">$str3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">i love youiloveyoui,love,you<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">'i love you'</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>str&#125;</span><span class="token comment"># 输出：10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提取部分字符串"><a href="#提取部分字符串" class="headerlink" title="提取部分字符串"></a>提取部分字符串</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">'i love you'</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str<span class="token operator">:</span>1&#125;</span> <span class="token comment"># 从第1个截取到末尾。注意从0开始。</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str<span class="token operator">:</span>2<span class="token operator">:</span>2&#125;</span> <span class="token comment"># 从第2个截取2个。</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str<span class="token operator">:</span>0&#125;</span> <span class="token comment"># 全部截取。</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str<span class="token operator">:-</span>3&#125;</span> <span class="token comment"># 负数无效，视为0。</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str<span class="token operator">:</span>0-7<span class="token operator">:</span>3&#125;</span> <span class="token comment"># 从右边算起第几个字符(7)开始，及字符的个数(3)</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str<span class="token operator">:</span>0-7&#125;</span> <span class="token comment"># 从右边第几个字符开始，一直到结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">love youloi love youi love youoveove you<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除部分字符串"><a href="#删除部分字符串" class="headerlink" title="删除部分字符串"></a>删除部分字符串</h3><p>使用<code>%</code>以及<code>%</code>截取字符串，注意配合使用的<code>*</code>位置(表示不要的位置)，<strong>删除包括了指定的字符本身。</strong></p><ul><li><code>#</code>号截取，删除左边字符，保留右边字符。</li><li><code>##</code>号截取，删除左边字符，保留右边字符。</li><li><code>%</code>号截取，删除右边字符，保留左边字符</li><li><code>%%</code>号截取，删除右边字符，保留左边字符</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token string">"http://www.aaa.com/123.htm"</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;var<span class="token operator">#</span>*<span class="token operator">/</span><span class="token operator">/</span>&#125;</span><span class="token comment"># 其中 var 是变量名，# 号是运算符，*// 表示从左边开始删除第一个 // 号及左边的所有字符</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;var<span class="token operator">##</span>*<span class="token operator">/</span>&#125;</span><span class="token comment"># ##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;var<span class="token operator">%</span><span class="token operator">/</span>*&#125;</span><span class="token comment"># %/* 表示从右边开始，删除第一个 / 号及右边的字符</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;var<span class="token operator">%%</span><span class="token operator">/</span>*&#125;</span><span class="token comment"># %%/* 表示从右边开始，删除最后（最左边）一个 / 号及右边的字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">www.aaa.com&#x2F;123.htm123.htmhttp:&#x2F;&#x2F;www.aaa.comhttp:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h3><p><strong>注意</strong>：使用<code>index</code>时，<strong>字符串索引从1开始</strong>，<strong>截取字符串时索引从0开始</strong>。 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"hello word"</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token string">"l"</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token string">"lo"</span><span class="token variable">`</span></span> <span class="token comment">#最后一个参数是字符，会对后面字符串每一个单独查找，返回最靠前的index</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">$str</span>"</span> o<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> length <span class="token string">"<span class="token variable">$str</span>"</span><span class="token variable">`</span></span> <span class="token comment">#字符串长度</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> substr <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token number">1</span> <span class="token number">6</span><span class="token variable">`</span></span> <span class="token comment">#从字符串中位置1开始截取6个字符。索引是从0开始的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出:</p><pre class="line-numbers language-none"><code class="language-none">33510hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意字符串变量需要加双引号。第2个例子<code>lo</code>里，<code>l</code>的index是3，<code>o</code>的index是5，最终取所有字符里最靠前的index。</p><p>拓展：<code>expr</code>更多关于字符串用法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">STRING <span class="token builtin class-name">:</span> REGEXP   anchored pattern match of REGEXP <span class="token keyword">in</span> STRINGmatch STRING REGEXP        same as STRING <span class="token builtin class-name">:</span> REGEXPsubstr STRING POS LENGTH   <span class="token comment">#从STRING中POS位置开始截取LENGTH个字符。POS索引是从1开始的。</span>index STRING CHARS         <span class="token comment">#在STRING中查找字符CHARS首次出现的位置，没有找到返回0</span>length STRING              <span class="token comment">#字符串长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p><p>在Shell中，用括号来表示数组，数组元素用<code>空格</code>符号分割开。定义数组的一般形式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array_name</span><span class="token operator">=</span><span class="token punctuation">(</span>value1 value2 <span class="token punctuation">..</span>. valuen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array_name</span><span class="token operator">=</span><span class="token punctuation">(</span>value0 value1 value2 value3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array_name</span><span class="token operator">=</span><span class="token punctuation">(</span>    value0    value1    value2    value3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以单独定义数组的各个分量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">array_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>value0array_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>value1array_name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以不使用连续的下标，而且下标的范围没有限制。</p><p>下面来读取数组：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array_name<span class="token punctuation">[</span>2<span class="token punctuation">]</span>&#125;</span> <span class="token comment">#读取下标为2的元素</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array_name<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span> <span class="token comment">#读取所有元素</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array_name<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token comment">#读取所有元素</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>array_name<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span> <span class="token comment">#获取数组长度</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>array_name<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token comment">#获取数组长度</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>array_name<span class="token punctuation">[</span>1<span class="token punctuation">]</span>&#125;</span> <span class="token comment">#获取数组中单个元素的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">value2value0 value1 value2 value3value0 value1 value2 value3<span class="token number">4</span><span class="token number">4</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对比shell里字符串和数组，我们发现：</p><p>字符串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token variable">$&#123;<span class="token operator">#</span>str&#125;</span> <span class="token comment"># 读取字符串长度</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str&#125;</span> <span class="token comment"># 读取字符串全部</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;str<span class="token operator">:</span>1&#125;</span> <span class="token comment"># 截取字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数组：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span>a1 a2 a3<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>arr<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 读取数组长度</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>arr<span class="token punctuation">[</span>1<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 读取数组某个元素长度</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;arr<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 读取数组全部</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;arr<span class="token punctuation">[</span>1<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 读取数组某个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$&#123;#ele*&#125;</code>用来读取ele元素长度属性<br><code>$&#123;ele*&#125;</code>用来读取或操作ele元素</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell-chapter4-条件控制</title>
      <link href="2021/03/14/shell-chapter4-tiao-jian-kong-zhi/"/>
      <url>2021/03/14/shell-chapter4-tiao-jian-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-chapter4-条件控制"><a href="#Shell-chapter4-条件控制" class="headerlink" title="Shell-chapter4-条件控制"></a>Shell-chapter4-条件控制</h1><p>本文参考：<a href="https://github.com/52fhy/shell-book">52fhy的仓库</a>、<a href="https://www.runoob.com/linux/linux-shell.html">菜鸟教程</a></p><h2 id="条件判断：if语句"><a href="#条件判断：if语句" class="headerlink" title="条件判断：if语句"></a>条件判断：if语句</h2><p>语法格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> expression <span class="token punctuation">]</span><span class="token keyword">then</span>   Statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to be executed <span class="token keyword">if</span> expression is <span class="token boolean">true</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>expression</code> 和方括号([ ])之间必须有<strong>空格</strong>，否则会有语法错误。</p><p>if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。Shell 有三种 if … else 语句：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">..</span>. <span class="token keyword">fi</span> 语句<span class="token keyword">if</span> <span class="token punctuation">..</span>. <span class="token keyword">else</span> <span class="token punctuation">..</span>. <span class="token keyword">fi</span> 语句<span class="token keyword">if</span> <span class="token punctuation">..</span>. <span class="token keyword">elif</span> <span class="token punctuation">..</span>. <span class="token keyword">else</span> <span class="token punctuation">..</span>. <span class="token keyword">fi</span> 语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"a is equal to b"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -gt <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">"a is greater to b"</span><span class="token keyword">else</span><span class="token builtin class-name">echo</span> <span class="token string">"a is less to b"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>if ... else</code> 语句也可以写成一行，以命令的方式来运行:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"a is equal to b"</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token builtin class-name">echo</span> <span class="token string">"a is not equal to b"</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>if ... else</code> 语句也经常与 <code>test</code> 命令结合使用，作用与上面一样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"a is equal to b"</span><span class="token keyword">else</span><span class="token builtin class-name">echo</span> <span class="token string">"a is not equal to b"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分支控制：case语句"><a href="#分支控制：case语句" class="headerlink" title="分支控制：case语句"></a>分支控制：case语句</h2><p><code>case ... esac</code> 与其他语言中的 <code>switch ... case</code> 语句类似，是一种多分枝选择结构。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">grade</span><span class="token operator">=</span><span class="token string">"B"</span><span class="token keyword">case</span> <span class="token variable">$grade</span> <span class="token keyword">in</span> <span class="token string">"A"</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"Very Good!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"Good!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"Come On!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"You Must Try!"</span><span class="token builtin class-name">echo</span> <span class="token string">"Sorry!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换成C语言是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Very Good!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'B'</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Very Good!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Very Good!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You Must Try!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sorry!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比看就很容易理解了。很相似，只是格式不一样。</p><p>需要注意的是：<br><strong>取值后面必须为关键字 in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 <code>;;</code>。</strong><code>;;</code> 与其他语言中的 <code>break</code> 类似，意思是跳到整个 <code>case</code> 语句的最后。</p><p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 <code>*</code> 捕获该值，再执行后面的命令。</p><p>再举一个例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">option</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;1&#125;</span>"</span><span class="token keyword">case</span> <span class="token variable">$&#123;option&#125;</span> <span class="token keyword">in</span>   <span class="token string">"-f"</span><span class="token punctuation">)</span> <span class="token assign-left variable">FILE</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;2&#125;</span>"</span>      <span class="token builtin class-name">echo</span> <span class="token string">"File name is <span class="token variable">$FILE</span>"</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token string">"-d"</span><span class="token punctuation">)</span> <span class="token assign-left variable">DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;2&#125;</span>"</span>      <span class="token builtin class-name">echo</span> <span class="token string">"Dir name is <span class="token variable">$DIR</span>"</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span>   *<span class="token punctuation">)</span>       <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> $<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token variable">`</span></span>:usage: [-f file] | [-d directory]"</span>      <span class="token builtin class-name">exit</span> <span class="token number">1</span> <span class="token comment"># Command to come out of the program with status 1</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./test.shtest.sh: usage: <span class="token punctuation">[</span> -f filename <span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span> -d directory <span class="token punctuation">]</span>./test.sh -f index.htmlFile name is index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里用到了特殊变量<code>$&#123;1&#125;</code>,指的是获取命令行的第一个参数。</p><p>下面结合<code>getopts</code>命令介绍下一个经典的例子：从命令行读取参数。</p><p>run.sh  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function-name function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> -s [start|stop|reload|restart] -e [online|test]"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    usage<span class="token keyword">fi</span><span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">'s:e:h'</span> OPT<span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">case</span> <span class="token variable">$OPT</span> <span class="token keyword">in</span>        s<span class="token punctuation">)</span> <span class="token assign-left variable">cmd</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        e<span class="token punctuation">)</span> <span class="token assign-left variable">env</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        h<span class="token punctuation">)</span> usage<span class="token punctuation">;</span><span class="token punctuation">;</span>        ?<span class="token punctuation">)</span> usage<span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">esac</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token variable">$cmd</span><span class="token builtin class-name">echo</span> <span class="token variable">$env</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们直接运行<code>run.sh</code>的时候，会调用<code>usage</code>显示帮助；如果输入正确的参数，则会进入正确的流程。运行示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> run.sh -s start -e <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>shell的for循环与c、php等语言不同，同Python很类似。下面是语法格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 列表<span class="token keyword">do</span>    command1    command2    <span class="token punctuation">..</span>.    commandN<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token keyword">for</span> <span class="token for-or-select variable">value</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">"The value is <span class="token variable">$value</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">The value is <span class="token number">1</span>The value is <span class="token number">2</span>The value is <span class="token number">3</span>The value is <span class="token number">4</span>The value is <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺序输出字符串中的字符：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">str</span> <span class="token keyword">in</span> <span class="token string">'This is a string'</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$str</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">This is a string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遍历目录下的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">FILE</span> <span class="token keyword">in</span> *<span class="token keyword">do</span>   <span class="token builtin class-name">echo</span> <span class="token variable">$FILE</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码将遍历当前目录下所有的文件。在Linux下，可以改为其他目录试试。</p><p>遍历文件内容：<br>city.txt</p><pre class="line-numbers language-none"><code class="language-none">beijingtianjinshanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">citys</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> city.txt<span class="token variable">`</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">city</span> <span class="token keyword">in</span> <span class="token variable">$citys</span><span class="token keyword">do</span>   <span class="token builtin class-name">echo</span> <span class="token variable">$city</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">beijingtianjinshanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>只要while后面的条件满足，就一直执行do里面的代码块。</p><p>其格式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">command</span><span class="token keyword">do</span>   Statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to be executed <span class="token keyword">if</span> <span class="token builtin class-name">command</span> is <span class="token boolean">true</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>命令执行完毕，控制返回循环顶部，从头开始直至测试条件为假。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$c</span> -lt <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> <span class="token string">"Value c is <span class="token variable">$c</span>"</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c + <span class="token number">1</span><span class="token variable">`</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">Value c is 0Value c is 1Value c is 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里由于shell本身不支持算数运算，所以使用<code>expr</code>命令进行自增。</p><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><p>until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。一般while循环优于until循环，但在某些时候，也只是极少数情况下，until 循环更加有用。</p><p>将上面while循环的例子改改，就能达到一样的效果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token variable">$c</span> -eq <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> <span class="token string">"Value c is <span class="token variable">$c</span>"</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c + <span class="token number">1</span><span class="token variable">`</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先do里面的语句块一直在运行，直到满足了until的条件就停止。</p><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">Value c is 0Value c is 1Value c is 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h2><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，像大多数编程语言一样，Shell也使用 break 和 continue 来跳出循环。</p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -lt <span class="token number">5</span> <span class="token punctuation">]</span><span class="token keyword">do</span><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $i + <span class="token number">1</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token builtin class-name">break</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> -e <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在嵌套循环中，break 命令后面还可以跟一个整数，表示跳出第几层循环。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">break</span> n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示跳出第 n 层循环。</p><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -lt <span class="token number">5</span> <span class="token punctuation">]</span><span class="token keyword">do</span><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $i + <span class="token number">1</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token builtin class-name">continue</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> -e <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">1245<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell-chapter5-函数</title>
      <link href="2021/03/14/shell-chapter5-han-shu/"/>
      <url>2021/03/14/shell-chapter5-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-chapter5-函数"><a href="#Shell-chapter5-函数" class="headerlink" title="Shell-chapter5-函数"></a>Shell-chapter5-函数</h1><p>本文参考：<a href="https://github.com/52fhy/shell-book">52fhy的仓库</a>、<a href="https://www.runoob.com/linux/linux-shell.html">菜鸟教程</a></p><p>函数可以让我们将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高。像其他编程语言一样，Shell 也支持函数。Shell 函数<strong>必须先定义后使用</strong>。</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>Shell 函数的定义格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">function_name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    list of commands    <span class="token punctuation">[</span> <span class="token builtin class-name">return</span> value <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>function</code>关键字是可选的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function-name function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token builtin class-name">echo</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>调用函数只需要给出函数名，不需要加括号。</strong></p><p>函数返回值，可以显式增加return语句；<strong>如果不加，会将最后一条命令运行结果作为返回值</strong>。</p><p>Shell 函数返回值<strong>只能是整数</strong>，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。如果 return 其他数据，比如一个字符串，往往会得到错误提示：<code>numeric argument required</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> <span class="token function-name function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token builtin class-name">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">line <span class="token number">4</span>: return: hello: numeric argument required<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一定要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果，脚本在需要的时候访问这个变量来获得函数返回值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> <span class="token function-name function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token builtin class-name">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token assign-left variable">str</span><span class="token operator">=</span>hello<span class="token builtin class-name">echo</span> <span class="token variable">$str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>像删除变量一样，删除函数也可以使用 <code>unset</code> 命令，不过要加上 <code>.f</code> 选项，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$unset</span> .f function_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你希望直接从终端调用函数，可以将函数定义在主目录下的 .profile 文件，这样每次登录后，在命令提示符后面输入函数名字就可以立即调用。</p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 <code>$n</code> 的形式来获取参数的值，例如，<code>$1</code>表示第一个参数，<code>$2</code>表示第二个参数…这就是前面讲的特殊变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> <span class="token function-name function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token variable">$#</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"no param"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token variable">$1</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $1 + $2<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $1 + $2 + $3<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$#</span> params! It's too much!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token punctuation">&#125;</span><span class="token function">sum</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">4 params! It&#39;s too much!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，<code>$10</code> 不能获取第十个参数，获取第十个参数需要<code>$&#123;10&#125;</code>。当<code>n&gt;=10</code>时，需要使用<code>$&#123;n&#125;</code>来获取参数。</p><p>另外，还有几个特殊变量用来处理参数，前面已经提到：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">特殊变量说明<span class="token variable">$#</span>传递给函数的参数个数。<span class="token variable">$*</span>显示所有传递给函数的参数。<span class="token variable">$@</span>与<span class="token variable">$*</span>相同，但是略有区别，请查看Shell特殊变量。<span class="token variable">$?</span>函数的返回值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何获取函数返回值"><a href="#如何获取函数返回值" class="headerlink" title="如何获取函数返回值"></a>如何获取函数返回值</h2><p>后面的变量需要使用函数的返回值，怎么实现？  </p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> <span class="token function-name function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">1</span>+2+3<span class="token variable">`</span></span><span class="token punctuation">&#125;</span><span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">sum</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以取到返回值了。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell-chapter6-其它</title>
      <link href="2021/03/14/shell-chapter6-qi-ta/"/>
      <url>2021/03/14/shell-chapter6-qi-ta/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-chapter6-其它"><a href="#Shell-chapter6-其它" class="headerlink" title="Shell-chapter6-其它"></a>Shell-chapter6-其它</h1><p>本文参考：<a href="https://github.com/52fhy/shell-book">52fhy的仓库</a>、<a href="https://www.runoob.com/linux/linux-shell.html">菜鸟教程</a></p><h2 id="Shell输入输出重定向"><a href="#Shell输入输出重定向" class="headerlink" title="Shell输入输出重定向"></a>Shell输入输出重定向</h2><p>Unix 命令默认从标准输入设备(stdin)获取输入，将结果输出到标准输出设备(stdout)显示。一般情况下，标准输入设备就是键盘，标准输出设备就是终端，即显示器。<br>输出重定向</p><p>命令的输出不仅可以是显示器，还可以很容易的转移向到文件，这被称为输出重定向。</p><p>命令输出重定向的语法为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">></span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，输出到显示器的内容就可以被重定向到文件。</p><p>例如，下面的命令在显示器上不会看到任何输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span> <span class="token operator">></span> <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开 users 文件，可以看到下面的内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token function">users</span>oko         tty01   Sep <span class="token number">12</span> 07:30ai          tty15   Sep <span class="token number">12</span> <span class="token number">13</span>:32ruth        tty21   Sep <span class="token number">12</span> <span class="token number">10</span>:10pat         tty24   Sep <span class="token number">12</span> <span class="token number">13</span>:07steve       tty25   Sep <span class="token number">12</span> <span class="token number">13</span>:03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出重定向会覆盖文件内容，请看下面的例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> line <span class="token number">1</span> <span class="token operator">></span> <span class="token function">users</span><span class="token function">cat</span> <span class="token function">users</span>line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果不希望文件内容被覆盖，可以使用 <code>&gt;&gt;</code> 追加到文件末尾，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> line <span class="token number">2</span> <span class="token operator">>></span> <span class="token function">users</span><span class="token function">cat</span> <span class="token function">users</span>line <span class="token number">1</span>line <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入重定向</p><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&lt;</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p><p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p><p>例如，计算 users 文件中的行数，可以使用下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> -l <span class="token function">users</span><span class="token number">2</span> <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以将输入重定向到 users 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> -l <span class="token operator">&lt;</span> <span class="token function">users</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p><h2 id="重定向深入讲解"><a href="#重定向深入讲解" class="headerlink" title="重定向深入讲解"></a>重定向深入讲解</h2><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p><ul><li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li><li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li><li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li></ul><p>默认情况下，<code>command &gt; file</code> 将 stdout 重定向到 file，<code>command &lt; file</code> 将stdin 重定向到 file。</p><p>如果希望 stderr 重定向到 file，可以这样写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token number">2</span> <span class="token operator">>></span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2 表示标准错误文件(stderr)。</p><p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">></span> <span class="token function">file</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&lt;</span> file1 <span class="token operator">></span>file2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。 </p><p><strong>全部可用的重定向命令列表：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令说明<span class="token builtin class-name">command</span> <span class="token operator">></span> <span class="token function">file</span>将输出重定向到 file。<span class="token builtin class-name">command</span> <span class="token operator">&lt;</span> <span class="token function">file</span>将输入重定向到 file。<span class="token builtin class-name">command</span> <span class="token operator">>></span> <span class="token function">file</span>将输出以追加的方式重定向到 file。n <span class="token operator">></span> <span class="token function">file</span>将文件描述符为 n 的文件重定向到 file。n <span class="token operator">>></span> <span class="token function">file</span>将文件描述符为 n 的文件以追加的方式重定向到 file。n <span class="token operator">>&amp;</span> m将输出文件 m 和 n 合并。n <span class="token operator">&lt;&amp;</span> m将输入文件 m 和 n 合并。<span class="token operator">&lt;&lt;</span> tag将开始标记 tag 和结束标记 tag 之间的内容作为输入。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h2><p>Here Document 目前没有统一的翻译，这里暂译为<code>嵌入文档</code>。Here Document 是 Shell 中的一种特殊的重定向方式，它的基本的形式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&lt;&lt;</span> <span class="token string">delimiter    documentdelimiter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p><p>注意：<br><strong>结尾的delimiter 一定要顶格写</strong>，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</p><p>开始的delimiter前后的空格会被忽略掉。</p><p>下面的例子，通过 <code>wc -l</code> 命令计算 document 的行数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> -l <span class="token operator">&lt;&lt;</span> <span class="token string">EOF    This is a simple lookup program    for good (and bad) restaurants    in Cape Town.EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出： 3</p><p>也可以 将 Here Document 用在脚本中，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOFThis is a simple lookup programfor good (and bad) restaurantsin Cape Town.EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">This is a simple lookup programfor good (and bad) restaurantsin Cape Town.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="dev-null-文件"><a href="#dev-null-文件" class="headerlink" title="/dev/null 文件"></a>/dev/null 文件</h2><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 <code>/dev/null</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>/dev/null</code> 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 <code>/dev/null</code> 文件非常有用，将命令的输出重定向到它，会起到<code>禁止输出</code>的效果。</p><p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">></span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样不会在屏幕打印任何信息。</p><h2 id="Shell文件包含"><a href="#Shell文件包含" class="headerlink" title="Shell文件包含"></a>Shell文件包含</h2><p>像其他语言一样，Shell 也可以包含外部脚本，将外部脚本的内容合并到当前脚本。</p><p>Shell 中包含脚本可以使用 <code>. filename</code> 或 <code>source filename</code> 。</p><p>两种方式的效果相同，简单起见，一般使用点号(.)，但是注意点号(.)和文件名中间有一空格。</p><p>示例：<br>被包含文件：sub.sh</p><pre class="line-numbers language-none"><code class="language-none">name&#x3D;&quot;yjc&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主文件：test.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span> ./sub.sh<span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">yjc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取当前正在执行脚本的绝对路径"><a href="#获取当前正在执行脚本的绝对路径" class="headerlink" title="获取当前正在执行脚本的绝对路径"></a>获取当前正在执行脚本的绝对路径</h2><p>正确的命令是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">basepath</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> `dirname $0`<span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接使用<code>pwd</code>或者<code>dirname $0</code>是不对的。</p><h2 id="按特定字符串截取字符串"><a href="#按特定字符串截取字符串" class="headerlink" title="按特定字符串截取字符串"></a>按特定字符串截取字符串</h2><p>示例：截取<code>/www/html/php/myapp/</code>里的myapp。</p><p>方案：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str</span><span class="token operator">=</span>/www/html/php/myapp/<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $str<span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s#/# #g'</span><span class="token variable">)</span></span><span class="token punctuation">)</span><span class="token assign-left variable">b_len</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $<span class="token punctuation">&#123;</span>#b<span class="token punctuation">[</span>*<span class="token punctuation">]</span><span class="token punctuation">&#125;</span> - <span class="token number">1</span><span class="token variable">`</span></span><span class="token assign-left variable">app_name</span><span class="token operator">=</span><span class="token variable">$&#123;b<span class="token punctuation">[</span>$b_len<span class="token punctuation">]</span>&#125;</span><span class="token builtin class-name">echo</span> <span class="token variable">$app_name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里利用<code>sed</code>将字符串按指定字符截成数组，然后取最后一个。  </p><p>计算数组长度：<code>$&#123;#arr[*]&#125;</code><br>计算则需要使用<code>expr</code>命令</p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><h3 id="awk简介"><a href="#awk简介" class="headerlink" title="awk简介"></a>awk简介</h3><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件(或其他方式的输入流, 如重定向输入)逐行的读入（看作一个记录集）, <strong>把每一行看作一条记录</strong>，以空格(或\t,或用户自己指定的分隔符)为默认分隔符<strong>将每行切片</strong>（类似字段），切开的部分再进行各种分析处理。</p><p>awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p><p>Awk基本语法:　</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">awk</span> <span class="token string">'pattern1 &#123;command1;command 2…; command 3&#125;  pattern2 &#123; command …&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pattern表示用来过滤记录的模式,可是是正则表达式，关系运算表达式，也可以什么也没有(表示选中所有记录)。</p><p>每个pattern选中的行记录会被花括号括起来的命令command操作一遍, command之间用<code>;</code>分割。 花括号里面可以什么也没有, 则默认为print输出整行记录。 Comamnd可以是输出， 可以是算术运算，逻辑运算，循环控制等等。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>s.txt</p><pre class="line-numbers language-none"><code class="language-none">zhangsan 1977 male computer 83lisi 1989 male math 99wanglijiang 1990 female chinese 78xuliang 1977 male economic 89xuxin 1986 female english 99wangxuebing 1978 male math 89lichang 1989 male math 99wanglijiang 1990 female chinese 78zhangsansan 1977 male computer 83 langxuebing 1978 male math 89lisibao 1989 male math 99xiaobao 1990 female chinese 78<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一行中的5个字段分别表示<code>姓名, 出生年, 性别,科目,分数</code>, 是一个很传统很典型的报表文件。</p><p>现在演示awk是如何查找的：</p><p>1)直接输出1990年出生的同学:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> <span class="token string">'/1990/'</span> s.txtwanglijiang <span class="token number">1990</span> female chinese <span class="token number">78</span>wanglijiang <span class="token number">1990</span> female chinese <span class="token number">78</span>xiaobao <span class="token number">1990</span> female chinese <span class="token number">78</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-none"><code class="language-none">$ awk &#39;&#x2F;1990&#x2F;&#123;print $0&#125;&#39; s.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>awk默认把输入的内容以空格拆分出每列。<code>$0</code>表示匹配所有列，<code>print $0</code>将输出所有列，每列分隔符是空格。</p><p>2）对chinese的课程的行输出”语文”：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> <span class="token string">'/chinese/&#123;print "语文"&#125;'</span> s.txt语文语文语文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）记录的头部和结尾加上一段说明：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> <span class="token string">'BEGIN&#123;print "Result of the quiz:<span class="token entity" title="\n">\n</span>"&#125;&#123;print <span class="token variable">$0</span>&#125;END&#123;print "------"&#125;'</span> s.txtResult of the quiz:zhangsan <span class="token number">1977</span> male computer <span class="token number">83</span>lisi <span class="token number">1989</span> male math <span class="token number">99</span>wanglijiang <span class="token number">1990</span> female chinese <span class="token number">78</span>xuliang <span class="token number">1977</span> male economic <span class="token number">89</span>xuxin <span class="token number">1986</span> female english <span class="token number">99</span>wangxuebing <span class="token number">1978</span> male math <span class="token number">89</span>lichang <span class="token number">1989</span> male math <span class="token number">99</span>wanglijiang <span class="token number">1990</span> female chinese <span class="token number">78</span>zhangsansan <span class="token number">1977</span> male computer <span class="token number">83</span>langxuebing <span class="token number">1978</span> male math <span class="token number">89</span>lisibao <span class="token number">1989</span> male math <span class="token number">99</span>xiaobao <span class="token number">1990</span> female chinese <span class="token number">78</span>------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AWK工作流程：<strong>逐行扫描文件，从第一行到最后一行，寻找匹配特定模式的行，并在这些行上进行用户想要到的操作</strong>。</p><p>BEGIN只会在最开始执行；END只会在扫描所有行数之后执行。BEGIN和END之间的花括号的内容每扫描一行都会执行。</p><p>4)查找女生的成绩且只输出姓名、学科、成绩：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> <span class="token string">'<span class="token variable">$3</span>=="female"&#123;print <span class="token variable">$1</span>,<span class="token variable">$4</span>,<span class="token variable">$5</span>&#125;'</span> s.txtwanglijiang chinese <span class="token number">78</span>xuxin english <span class="token number">99</span>wanglijiang chinese <span class="token number">78</span>xiaobao chinese <span class="token number">78</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$1</code>表示第1列，<code>$n</code>类推。这里条件是表达式，而不是正则。print里<code>,</code>表示空格分隔符。</p><p>5)找出1990年出生的学生姓名，并要求匹配正则:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> <span class="token string">'<span class="token variable">$2</span>~/1990/&#123;print <span class="token variable">$1</span>&#125;'</span> s.txtwanglijiangwanglijiangxiaobao<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>~</code>表示匹配正则表达式。<code>!~</code>表示不匹配正则表达式。</p><p>如果需要多选，则改成：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> <span class="token string">'<span class="token variable">$2</span>~/(1990|1991)/&#123;print <span class="token variable">$1</span>&#125;'</span> s.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>awk更多内容详见：<a href="https://www.cnblogs.com/52fhy/p/5836429.html#autoid-3-4-0">https://www.cnblogs.com/52fhy/p/5836429.html#autoid-3-4-0</a></p><p>（完结）</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双栈法解决表达式计算问题</title>
      <link href="2021/03/11/shuang-zhan-fa-jie-jue-biao-da-shi-ji-suan-wen-ti/"/>
      <url>2021/03/11/shuang-zhan-fa-jie-jue-biao-da-shi-ji-suan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="使用两个栈解决表达式计算问题"><a href="#使用两个栈解决表达式计算问题" class="headerlink" title="使用两个栈解决表达式计算问题"></a>使用两个栈解决表达式计算问题</h3><p>参考：</p><blockquote><p><a href="https://www.jianshu.com/p/bb0a1c588581">zhaoranWang</a>、<a href="https://leetcode-cn.com/problems/basic-calculator-ii/solution/shi-yong-shuang-zhan-jie-jue-jiu-ji-biao-c65k/">AC_OIer</a></p></blockquote><p>对于<strong>表达式计算</strong>这一类问题，你都可以使用这套思路进行解决。</p><p> 例题:</p><blockquote><p><a href="https://leetcode-cn.com/problems/basic-calculator/">224. 基本计算器</a>、<a href="https://leetcode-cn.com/problems/basic-calculator-ii/solution/">227. 基本计算器 II</a></p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>对于任何表达式而言，我们都使用两个栈 <code>nums </code>和 <code>ops</code>：</p><blockquote><p><strong>nums :</strong> 存放所有的数字<br><strong>ops :</strong> 存放所有的数字以外的操作</p></blockquote><p>然后从前往后做，对遍历到的字符做分情况讨论：</p><ul><li><p><code>空格</code> : 跳过</p></li><li><p><code>( </code>: 直接加入 <strong>ops</strong> 中，等待与之匹配的<code> )</code></p></li><li><p><code>) </code>: 使用现有的 <strong>nums</strong> 和 <strong>ops</strong> 进行计算，直到遇到最近的一个左括号为止，计算结果放到 <strong>nums</strong></p></li><li><p><code>数字</code> : 从当前位置开始继续往后取，将整一个连续数字整体取出，加入 <strong>nums</strong></p></li><li><p><code>+-*/^%...等二元操作符</code>: 需要将操作符放入 <strong>ops</strong> 中。有以下放入原则：</p><blockquote><ol><li><p>如果当前操作符的优先级比<strong>ops</strong> 栈顶元素的优先级高，直接放入；</p></li><li><p>否则，<strong>消耗</strong>栈顶元素，直到<strong>ops</strong> 栈顶元素的优先级比当前操作符的优先级<strong>低</strong>，<strong>最后放入当前操作符</strong>。</p></li></ol><p>具体来说，从<strong>nums</strong>中取出两个数字(top()、pop())，用<strong>ops</strong> <strong>栈顶元素</strong>进行计算，将计算结果放回<strong>nums</strong>中。如果<strong>ops</strong>栈顶元素的优先级和当前操作符的优先级相同，表示遇到了小括号，只需要弹出栈顶元素即可。</p></blockquote></li></ul><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><ul><li>正确设置优先级表格，没写的位置表示<strong>正常的表达式</strong>不会有这种优先级比较；</li><li>初始化数字栈<strong>nums</strong>时，为了防止中间结果溢出，选择<code>long</code>类型而不是<code>int</code>；放入一个<code>0</code>，针对输入：<code>-1</code>这种情况；</li><li>定义一个优先级最低的操作符<code>#</code>，在字符串最后添加这个操作符，初始化<strong>ops</strong>时放入一个<code>#</code>；</li><li>需要区分当前数字是不是数字字符串的<strong>首位</strong>(“1”是”123”的首位，读入”1”和”2”会有不同的处理方法)</li></ul><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token comment">//通用，不止针对这一题，对于所有二元运算（含小括号）适用</span>using namespace std<span class="token punctuation">;</span><span class="token comment">//1.初始化</span><span class="token keyword">char</span> table<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//算符优先级表,定义'#'优先级最低</span><span class="token comment">//         +    -    *    /    ^    (    )    #    // 当前运算符</span><span class="token comment">/* + */</span>   <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span><span class="token comment">/* - */</span>   <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span><span class="token comment">/* * */</span>   <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span><span class="token comment">/* / */</span>   <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span><span class="token comment">/* ^ */</span>   <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span><span class="token comment">/* ( */</span>   <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span><span class="token comment">/* ) */</span>   <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span><span class="token comment">/* # */</span>   <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token comment">//栈顶运算符</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'^'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'('</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">')'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'#'</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//没有含义的返回值</span><span class="token punctuation">&#125;</span>bool <span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">Compute</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//给定操作符ch,返回计算结果</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'+'</span> <span class="token operator">:</span>            <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span> <span class="token operator">:</span>            <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'*'</span> <span class="token operator">:</span>            <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'/'</span> <span class="token operator">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'^'</span> <span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//pow()运算要求第一个参数为double</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//没有含义的返回值</span>        <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> nums<span class="token punctuation">;</span><span class="token comment">//数字栈</span>    stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> ops<span class="token punctuation">;</span><span class="token comment">//操作符栈</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">"#"</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//针对 -1这种情况</span>    ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token comment">//当前字符</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token comment">//即将入栈的数字</span>    <span class="token keyword">int</span> cur_index<span class="token punctuation">;</span><span class="token comment">//当前符号的索引</span>    <span class="token keyword">int</span> top_index<span class="token punctuation">;</span><span class="token comment">//当前符号栈顶元素的索引</span>    <span class="token keyword">int</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">;</span><span class="token comment">//前后两个运算数</span>    <span class="token comment">//2.开始遍历</span>    bool flag <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//当前字符串中，下一个数字是不是 首位。“123”,1是首位</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ch <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//跳过空格</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//数字</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> false<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                num <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//符号</span>            cur_index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            top_index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>ops<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>top_index<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'&lt;'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//现在的操作符比栈顶元素的优先级更高</span>                ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span>top_index<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//栈顶元素的优先级更高,弹出两个数以及操作符开始计算</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>top_index<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//栈顶元素优先级更高，开始计算.这里的操作符不会是括号，看优先级表table</span>                    num2 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    num1 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    num <span class="token operator">=</span> <span class="token function">Compute</span><span class="token punctuation">(</span>ops<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//放入刚才的计算结果</span>                    nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//下一个操作符</span>                    ops<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    top_index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>ops<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>top_index<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//说明遇到了右括号与之前的左括号相等，出栈即可</span>                    ops<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//此时，栈顶元素的优先级会比当前元素的优先级低，放入当前元素</span>                    ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>top_index<span class="token punctuation">]</span><span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果当前元素和栈顶元素优先级相同，例如输入的表达式为"(1)"</span>                ops<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        flag <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token comment">//下一个数字是首位</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string s <span class="token operator">=</span> <span class="token string">"2 *7-4/3+(2^3/2)"</span><span class="token punctuation">;</span><span class="token comment">//整数除法仅保留整数部分</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">calculate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 表达式计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Books</title>
      <link href="2021/03/09/books/"/>
      <url>2021/03/09/books/</url>
      
        <content type="html"><![CDATA[<h3 id="代码随想录-背包问题专题精讲-v1-0"><a href="#代码随想录-背包问题专题精讲-v1-0" class="headerlink" title="代码随想录-背包问题专题精讲(v1.0)"></a>代码随想录-背包问题专题精讲(v1.0)</h3><div class="row">    <embed src="代码随想录-背包问题专题精讲(v1.0).pdf" width="100%" height="550" type="application/pdf"></div><h3 id="代码随想录-二叉树专题精讲-v1-1"><a href="#代码随想录-二叉树专题精讲-v1-1" class="headerlink" title="代码随想录-二叉树专题精讲(v1.1)"></a>代码随想录-二叉树专题精讲(v1.1)</h3><div class="row">    <embed src="代码随想录-二叉树专题精讲(v1.1).pdf" width="100%" height="550" type="application/pdf"></div><h3 id="代码随想录-回溯算法精讲-v1-1"><a href="#代码随想录-回溯算法精讲-v1-1" class="headerlink" title="代码随想录-回溯算法精讲(v1.1)"></a>代码随想录-回溯算法精讲(v1.1)</h3><div class="row">    <embed src="代码随想录-回溯算法精讲(v1.1).pdf" width="100%" height="550" type="application/pdf"></div><h3 id="代码随想录-贪心算法专题精讲-v1-0"><a href="#代码随想录-贪心算法专题精讲-v1-0" class="headerlink" title="代码随想录-贪心算法专题精讲(v1.0)"></a>代码随想录-贪心算法专题精讲(v1.0)</h3><div class="row">    <embed src="代码随想录-贪心算法专题精讲(v1.0).pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> Books </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> 动态规划dp </tag>
            
            <tag> 回溯算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零散知识点</title>
      <link href="2021/03/08/ling-san-zhi-shi-dian/"/>
      <url>2021/03/08/ling-san-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><a href="https://www.runoob.com/json/json-tutorial.html">参考</a></p><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><blockquote><p>JSON.parse(text[, reviver])</p><p><strong>text</strong>: 必需， 一个有效的 JSON <code>字符串</code>。</p><p><strong>reviver</strong>: 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。</p></blockquote><p>我们可以使用 JSON.parse() 方法将<code>JSON字符串</code>转换为 JavaScript <code>对象</code>。</p><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><blockquote><p>JSON.stringify(value[, replacer[, space]])</p><p>value: 必需， 要转换的 JavaScript 值（通常为对象或数组）。</p><p>replacer: 可选。用于转换结果的函数或数组。<br>如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串:””。</p><p>space:<br>可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如:\t。</p></blockquote><p>我们可以使用 JSON.stringify() 方法将 JavaScript <code>对象</code>转换为<code>JSON字符串</code>。</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h3><blockquote><p>delete myObj.sites[1];</p><p>delete 运算符并不是彻底删除元素，而是删除它的值，但<code>仍会保留空间</code>。换句话说，<br>运算符 delete 只是将该值置为 <code>undefined</code>，而<code>不会影响数组长度</code>。</p></blockquote><hr><hr><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p><a href="https://www.runoob.com/json/json-tutorial.html">参考</a></p><h3 id="array-splice"><a href="#array-splice" class="headerlink" title="array.splice()"></a>array.splice()</h3><blockquote><p>用法：array.splice(index,howmany,item1,…..,itemX)</p><p>解释:在index处<code>删除</code>howmany个元素并且<code>插入</code>元素item1,item2…;</p><p>如果只插入不删除，array.splice(index, 0, item1, item2)</p><p>返回的是被删除的元素，使用该方法<code>会对原数组进行修改</code>。</p></blockquote><h3 id="操作符"><a href="#操作符" class="headerlink" title="+操作符"></a><code>+</code>操作符</h3><blockquote><p>可以将某个类型转换为Number类型，如果转换失败，那么将得到 NaN<br>例如<br><code>+new Date()</code>能将当前时间<code>Mon Mar 08 2021 16:26:54 GMT+0800 (中国标准时间)</code>转换为数字<code>1615192014216</code>，时间戳:<code>这个数字/1000</code>。</p></blockquote><h3 id="理解函数调用"><a href="#理解函数调用" class="headerlink" title="理解函数调用"></a>理解函数调用</h3><ul><li><p>当调用函数时，除了传入在函数定义中显式声明的参数之外，同时还传入两个隐式参数:<code>arguments</code>与<code>this</code>。</p><ul><li><p><code>arguments</code>参数是传入函数的所有参数的集合。具有length属性，表示传入参数的个数，通过arguments参数还可获取那些与函数形参不匹配的参数。在<code>非严格模式</code>下，arguments对象是函数参数的别名，<u>修改arguments对象会修改函数实参</u>，<em>可以通过<strong>严格模式</strong>避免修改函数实参</em>。</p></li><li><p><code>this</code>表示函数上下文，即与函数调用相关联的对象。函数的定义方式和调用方式决定了this的取值。</p></li></ul></li><li><p>函数的调用方式有4种。</p><ul><li><p>作为函数调用:<code>skulk()</code>。</p></li><li><p>作为方法调用:<code>ninja.skulk()</code>。</p></li><li><p>作为构造函数调用:<code>new Ninja()</code>。</p></li><li><p>通过<code>apply</code>与<code>call</code>方法调用:<code>skulk.apply(ninja)</code>或<code>skulk.call(ninja)</code>。</p></li></ul></li><li><p>函数的调用方式影响<code>this</code>的取值。</p><ul><li><u>如果作为函数调用</u>，在<strong>非严格模式</strong>下，this指向全局<strong>window对象</strong>；在严格模式下，this指向<strong>undefined</strong>。</li><li><u>作为方法调用</u>，this通常指向调用的对象。</li><li><u>作为构造函数调用</u>，this指向新创建的对象。</li><li><u>通过<strong>call</strong>或<strong>apply</strong>调用</u>，this指向<strong>call</strong>或<strong>apply</strong>的<strong>第一个参数</strong>。</li></ul></li><li><p>箭头函数没有单独的<code>this</code>值，this <strong><em>在箭头函数创建时确定</em></strong>。</p></li><li><p>所有函数均可使用<code>bind方法</code><strong>创建新函数</strong>，并绑定到<strong>bind方法</strong>传入的参数上。<br>被绑定的函数与原始函数具有一致的行为。</p></li></ul><h3 id="设计模式-观察者模式-Observer模式"><a href="#设计模式-观察者模式-Observer模式" class="headerlink" title="设计模式 -观察者模式(Observer模式)"></a>设计模式 -观察者模式(Observer模式)</h3><p>什么是观察者模式 :</p><ul><li>Observer模式是行为模式之一，它的作用是当一个对象的状态发生变化时，能够自动通知其他关联对象，自动刷新对象状态。</li><li>Observer模式提供给关联对象一种同步通信的手段，使某个对象与依赖它的其他对象之间保持状态同步。</li></ul><ul><li>类似于<strong>派发事件</strong>一样的存在，也可以说是<strong>类似订阅事件</strong>，只不过它是实现这些的原理。</li></ul><p>不理解也没关系，代码可以清楚的解释(<strong>真的写的很详细了</strong>！)，如下:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建 观察者类 </span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//事件处理函数集合</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handles <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">//存放对象：&#123; 事件类型:[处理方法1,...], ...&#125;</span>   <span class="token punctuation">&#125;</span>       <span class="token comment">//订阅事件</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span> handle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断非继承属性,也就是自身&#123;&#125;这里面有无这个属性</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//如果没有这个事件类型，创建一个对象</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//传入的handle参数应该是一个函数</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handle <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'缺少回调函数'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token comment">//返回this 是为了 链式操作，一个观察者对象使用on方法后接着使用on方法</span>  <span class="token punctuation">&#125;</span>       <span class="token comment">//发布事件</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> key<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 把你传入的参数 传递给handle(回调函数)</span>              <span class="token comment">//可能一个事件类型有多个处理方法item，所有方法都调用一次</span>              <span class="token function">item</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>eventType<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">事件未注册</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//同上，方便链式操作</span>  <span class="token punctuation">&#125;</span>       <span class="token comment">//删除事件eventType的某个方法handle</span>  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span> handle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>eventType<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">事件未注册</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handle <span class="token operator">!=</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'缺少回调函数'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token comment">//遍历该事件的所有方法</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> handle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//删除这个事件的handle方法</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">callFn</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了回调函数callFn'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//注册监听事件 'event1'</span>observer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event1'</span><span class="token punctuation">,</span> callFn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首先为事件event1添加一个匿名的处理方法，再添加callFn方法</span><span class="token comment">//派发事件 'event1'</span>observer<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event1'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//事件event1有两个方法：1)打印所有传入参数args的匿名方法；2)callFn</span><span class="token comment">//这两个方法都会被调用，调用时参数args都是相同的array(1,2,3,4,5)</span><span class="token comment">// 删除掉event1的callFn方法</span>observer<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'event1'</span><span class="token punctuation">,</span> callFn<span class="token punctuation">)</span><span class="token punctuation">;</span>observer<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event1'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">[ 1, 2, 3, 4, 5 ]执行了回调函数callFn[ 7 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><hr><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="创建-XMLHttpRequest-对象"><a href="#创建-XMLHttpRequest-对象" class="headerlink" title="创建 XMLHttpRequest 对象"></a>创建 XMLHttpRequest 对象</h3><p>现代浏览器创建 XMLHttpRequest 对象的语法:</p><blockquote><p>variable=new XMLHttpRequest();</p></blockquote><h3 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h3><p>如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法:</p><blockquote><p>xmlhttp.open(“GET”,”ajax_info.txt”,true);<br>xmlhttp.send();</p></blockquote><blockquote><p>方法:<strong>open(<em>method</em>,<em>url</em>,<em>async</em>)</strong></p><p>描述:规定请求的类型、URL 以及是否异步处理请求。</p><p>参数:</p><blockquote><ul><li><p><strong>method</strong>:请求的类型；GET 或 POST</p></li><li><p><strong>url</strong>:文件在服务器上的位置</p></li><li><p><strong>async</strong>：true（异步）或 false（同步）</p></li></ul></blockquote></blockquote><blockquote><p>方法:<strong>send(<em>string</em>)</strong></p><p>描述:将请求发送到服务器。</p><p>参数:</p><blockquote><ul><li><strong><em>string</em></strong>:仅用于 POST 请求</li></ul></blockquote></blockquote><h3 id="GET-还是-POST？"><a href="#GET-还是-POST？" class="headerlink" title="GET 还是 POST？"></a>GET 还是 POST？</h3><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。<br>然而，在以下情况中，请使用 POST 请求:</p><ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送<strong>大量数据</strong>（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ul><h3 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>responseText</strong></td><td align="left">获得<strong>字符串</strong>形式的响应数据。</td></tr><tr><td align="left"><strong>responseXML</strong></td><td align="left">获得 <strong>XML</strong> 形式的响应数据。</td></tr></tbody></table><h3 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>onreadystatechange</strong></td><td align="left">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td></tr><tr><td align="left"><strong>readyState</strong></td><td align="left">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。                                                                          <u><strong>0:</strong></u> 请求未初始化；**<u>1:</u>** 服务器连接已建立；**<u>2:</u>** 请求已接收；**<u>3:</u>** 请求处理中；**<u>4:</u>** 请求已完成，且响应已就绪</td></tr><tr><td align="left"><strong>status</strong></td><td align="left"><strong><u>200:</u></strong> “OK” ；**<u>404:</u>** 未找到页面</td></tr></tbody></table><p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪:<a href="https://www.runoob.com/try/try.php?filename=tryajax_first">完整实例</a></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">loadXMLDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span>xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"/try/ajax/ajax_info.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>使用 AJAX 修改该文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loadXMLDoc()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="React书写习惯"><a href="#React书写习惯" class="headerlink" title="React书写习惯"></a>React书写习惯</h3><blockquote><ol><li>所有私有方法都以<code>_</code>开头;</li><li>所有事件监听的方法都用 handle 开头。把事件监听方法传给组件的时候，属性名用 on 开头;</li></ol></blockquote><h3 id="组件的内容编写顺序如下"><a href="#组件的内容编写顺序如下" class="headerlink" title="组件的内容编写顺序如下"></a>组件的内容编写顺序如下</h3><blockquote><ul><li>static 开头的类属性，如 defaultProps、propTypes。</li><li>构造函数，constructor。</li><li>getter/setter（还不了解的同学可以暂时忽略）。</li><li>组件生命周期。</li><li><code>_</code> 开头的私有方法。</li><li>事件监听方法，handle*。</li><li>render<code>开头的</code>方法，有时候 render() 方法里面的内容会分开到不同函数里面进行，这些函数都以 render 开头。</li><li>render() 方法。 如果所有的组件都按这种顺序来编写，那么维护起来就会方便很多，多人协作的时候别人理解代码也会一目了然。</li></ul></blockquote><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p><a href="https://www.runoob.com/react/react-refs.html">参考-菜鸟教程</a><br><a href="https://zhuanlan.zhihu.com/p/64412949">参考-知乎</a></p><p>React 提供三种方式创建 Refs:</p><blockquote><ul><li>字符串 Refs （将被废弃）</li><li>回调函数 Refs</li><li>React.createRef (从React 16.3开始)</li></ul></blockquote><h4 id="方式1：字符串-Refs（将被废弃）"><a href="#方式1：字符串-Refs（将被废弃）" class="headerlink" title="方式1：字符串 Refs（将被废弃）"></a>方式1：字符串 Refs（将被废弃）</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>React 实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> uppercase<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleInputCase <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toggleInputCase</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">toggleInputCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> isUpper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>uppercase<span class="token punctuation">;</span>        <span class="token comment">/* 注意这里 */</span><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>inputField<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>inputField<span class="token punctuation">.</span>value <span class="token operator">=</span> isUpper    <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> uppercase<span class="token operator">:</span> <span class="token operator">!</span>isUpper <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token punctuation">&#123;</span><span class="token comment">/* 创建一个字符串 ref: inputField */</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token string">"inputField"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleInputCase<span class="token punctuation">&#125;</span><span class="token operator">></span>      Toggle Case    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式2：回调函数-Refs"><a href="#方式2：回调函数-Refs" class="headerlink" title="方式2：回调函数 Refs"></a>方式2：回调函数 Refs</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>React 实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> uppercase<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleInputCase <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toggleInputCase</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">toggleInputCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> isUpper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>uppercase<span class="token punctuation">;</span><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputField<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment">/* 注意这里 */</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputField<span class="token punctuation">.</span>value <span class="token operator">=</span> isUpper    <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> uppercase<span class="token operator">:</span> <span class="token operator">!</span>isUpper <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token comment">/* Creating a callback ref and storing it in this.inputField ，注意这里*/</span><span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">elem</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputField <span class="token operator">=</span> elem<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleInputCase<span class="token punctuation">&#125;</span><span class="token operator">></span>          Toggle Case        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方式3：React-createRef-从React-16-3开始"><a href="#方式3：React-createRef-从React-16-3开始" class="headerlink" title="方式3：React.createRef (从React 16.3开始)"></a>方式3：React.createRef (从React 16.3开始)</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>React 实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> uppercase<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleInputCase <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toggleInputCase</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 注意这里声明ref */</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputField <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">toggleInputCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> isUpper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>uppercase<span class="token punctuation">;</span><span class="token comment">/* 注意这里current */</span><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputField<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment">/* 注意这里current */</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputField<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span> isUpper    <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> uppercase<span class="token operator">:</span> <span class="token operator">!</span>isUpper <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token comment">/* Referencing the ref from this.inputField */</span><span class="token punctuation">&#125;</span><span class="token comment">/* 注意这里绑定ref */</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputField<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleInputCase<span class="token punctuation">&#125;</span><span class="token operator">></span>          Toggle Case        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><p><a href="https://www.luogu.com.cn/blog/interestingLSY/memdfs-and-dp#">聊聊动态规划与记忆化搜索</a></p><p>小结：记忆化搜索可以避免重复求一个子问题，要求每一次求解子问题的<strong>答案</strong>只和求解<strong>子问题时的输入有关</strong>。</p><p>(未完…)</p>]]></content>
      
      
      <categories>
          
          <category> Record </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> React </tag>
            
            <tag> JS </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题小结</title>
      <link href="2021/02/28/bei-bao-wen-ti-xiao-jie/"/>
      <url>2021/02/28/bei-bao-wen-ti-xiao-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><center>解题思路</center></h1><p>安利公众号 <code>代码随想录</code>的<a href="https://mp.weixin.qq.com/s/znj-9j8mWymRFaPjJN2Qnw">文章1</a> 以及<a href="https://mp.weixin.qq.com/s/ZOehl3U1mDiyOQjFG1wNJA">文章2</a>。</p><p><img src="/2021/02/28/bei-bao-wen-ti-xiao-jie/640.png" alt="背包问题分类"></p><p>解决思路：</p><blockquote><p>Step1-确定dp数组（dp table）以及下标的含义<br>Step2-确定递推公式<br>Step3-dp数组如何初始化<br>Step4-确定遍历顺序<br>Step5-举例推导dp数组</p></blockquote><hr><h3 id="1-背包递推公式"><a href="#1-背包递推公式" class="headerlink" title="1. 背包递推公式"></a>1. 背包递推公式</h3><h4 id="1-1-问能否能装满背包（或者最多装多少）"><a href="#1-1-问能否能装满背包（或者最多装多少）" class="headerlink" title="1.1 问能否能装满背包（或者最多装多少）"></a>1.1 问能否能装满背包（或者最多装多少）</h4><blockquote><p>dp[j] = max(dp[j], dp[j - nums[i]] + nums[i])</p></blockquote><p>对应题目如下：</p><table><thead><tr><th align="center">题目</th><th align="center">题解</th></tr></thead><tbody><tr><td align="center"><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416.分割等和子集</a></td><td align="center"><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486632&idx=1&sn=4bb229e3f3f5774ac684c0127c88c984&scene=21#wechat_redirect">题解</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/last-stone-weight-ii/">1049.最后一块石头的重量 II</a></td><td align="center"><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486644&idx=1&sn=548c90df36b47d67290b5667c7cec3d3&scene=21#wechat_redirect">题解</a></td></tr></tbody></table><hr><h4 id="1-2-问装满背包有几种方法"><a href="#1-2-问装满背包有几种方法" class="headerlink" title="1.2 问装满背包有几种方法"></a>1.2 问装满背包有几种方法</h4><blockquote><p>dp[j] += dp[j - nums[i]] </p></blockquote><p>对应题目如下:</p><table><thead><tr><th align="center">题目</th><th align="center">题解</th></tr></thead><tbody><tr><td align="center"><a href="https://leetcode-cn.com/problems/target-sum/">494.目标和</a></td><td align="center"><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486709&idx=1&sn=75f1f43d96dbd1c5c3e281b8963e3c50&scene=21#wechat_redirect">题解</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/coin-change-2/">518. 零钱兑换 II</a></td><td align="center"><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486757&idx=1&sn=36f5eb60bfe4d8993cf3b3def5645a34&scene=21#wechat_redirect">题解</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/combination-sum-iv/">377.组合总和Ⅳ</a></td><td align="center"><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486826&idx=2&sn=80de2ae278bfd0c906d51fd012d37565&scene=21#wechat_redirect">题解</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯进阶版（完全背包）</a></td><td align="center"><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486833&idx=1&sn=beda10fdf8f53e8596dd3ad56ff751d5&scene=21">题解</a></td></tr></tbody></table><hr><h4 id="1-3-问背包装满最大价值"><a href="#1-3-问背包装满最大价值" class="headerlink" title="1.3 问背包装满最大价值"></a>1.3 问背包装满最大价值</h4><blockquote><p>dp[j] = max(dp[j], dp[j - weight[i]] + value[i])</p></blockquote><p>对应题目如下：</p><table><thead><tr><th align="center">题目</th><th align="center">题解</th></tr></thead><tbody><tr><td align="center"><a href="https://leetcode-cn.com/problems/ones-and-zeroes/">474.一和零</a></td><td align="center"><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486739&idx=2&sn=e226eacf67df9b6c784264f954ae42bf&scene=21#wechat_redirect">题解</a></td></tr></tbody></table><hr><h4 id="1-4-问装满背包所有物品的最小个数"><a href="#1-4-问装满背包所有物品的最小个数" class="headerlink" title="1.4 问装满背包所有物品的最小个数"></a>1.4 问装满背包所有物品的最小个数</h4><blockquote><p>dp[j] =  min(dp[j - coins[i]] + 1, dp[j])</p></blockquote><p>对应题目如下：</p><table><thead><tr><th align="center">题目</th><th align="center">题解</th></tr></thead><tbody><tr><td align="center"><a href="https://leetcode-cn.com/problems/coin-change/">322.零钱兑换</a></td><td align="center"><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486848&idx=1&sn=fec1c0c36789f4929a9067910afd600b&scene=21#wechat_redirect">题解</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/perfect-squares/">279.完全平方数</a></td><td align="center"><a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486872&idx=2&sn=01a3b81edafd125812d8860e89a6407f&scene=21#wechat_redirect">题解</a></td></tr></tbody></table><hr><h3 id="2-一维dp数组遍历顺序："><a href="#2-一维dp数组遍历顺序：" class="headerlink" title="2.  一维dp数组遍历顺序："></a>2.  一维dp数组遍历顺序：</h3><h4 id="2-1-0-1背包，即数组中的元素不可重复使用"><a href="#2-1-0-1背包，即数组中的元素不可重复使用" class="headerlink" title="2.1 0-1背包，即数组中的元素不可重复使用"></a>2.1 <strong>0-1背包</strong>，即数组中的元素<strong>不可重复使用</strong></h4><p>遍历物品放在<code>外循环</code> ，遍历背包容量在<code>内循环</code>，且内循环是<u><code>从大到小遍历</code></u>；</p><hr><h4 id="2-2-完全背包，即数组中的元素可重复使用"><a href="#2-2-完全背包，即数组中的元素可重复使用" class="headerlink" title="2.2 完全背包，即数组中的元素可重复使用"></a>2.2 <strong>完全背包</strong>，即数组中的元素<strong>可重复使用</strong></h4><h5 id="2-2-1-纯完全背包"><a href="#2-2-1-纯完全背包" class="headerlink" title="2.2.1 纯完全背包"></a>2.2.1 纯完全背包</h5><p>纯完全背包的一维dp数组实现，先遍历物品还是先遍历背包都是可以的，且第二层for循环是<code>从小到大遍历</code>。</p><blockquote><p><strong><em>为了方便记忆</em></strong>，我选择：遍历物品放在<code>外循环</code>，遍历背包容量在<code>内循环</code>。且内循环<code>正序</code>。</p></blockquote><hr><h5 id="2-2-2-排列组合问题"><a href="#2-2-2-排列组合问题" class="headerlink" title="2.2.2 排列组合问题"></a>2.2.2 <strong>排列组合问题</strong></h5><blockquote><p><code>求组合数</code>：外层for循环<code>遍历物品</code>，内层for循环<code>遍历背包</code></p><blockquote><p>例题：<a href="https://leetcode-cn.com/problems/coin-change-2/">518.零钱兑换II</a>|<a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486757&idx=1&sn=36f5eb60bfe4d8993cf3b3def5645a34&scene=21#wechat_redirect">题解</a></p></blockquote></blockquote><blockquote><p><code>求排列数</code>:   外层for循环<code>遍历背包</code>，内层for循环<code>遍历物品</code></p><blockquote><p>例题：<a href="https://leetcode-cn.com/problems/combination-sum-iv/">377.组合总和Ⅳ</a> | <a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486826&idx=2&sn=80de2ae278bfd0c906d51fd012d37565&scene=21#wechat_redirect">题解</a>、<a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯进阶版（完全背包）</a> | <a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486833&idx=1&sn=beda10fdf8f53e8596dd3ad56ff751d5&scene=21">题解</a></p></blockquote></blockquote><hr><h5 id="2-2-3-求最小数"><a href="#2-2-3-求最小数" class="headerlink" title="2.2.3 求最小数"></a>2.2.3 <strong>求最小数</strong></h5><p>两层for循环的先后顺序就无所谓了</p><blockquote><p>例题：<a href="https://leetcode-cn.com/problems/coin-change/">322.零钱兑换</a> | <a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486848&idx=1&sn=fec1c0c36789f4929a9067910afd600b&scene=21#wechat_redirect">题解</a>、<a href="https://leetcode-cn.com/problems/perfect-squares/">279.完全平方数</a> | <a href="https://mp.weixin.qq.com/s?__biz=MzUxNjY5NTYxNA==&mid=2247486872&idx=2&sn=01a3b81edafd125812d8860e89a6407f&scene=21#wechat_redirect">题解</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> 动态规划dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown不完全语法记录</title>
      <link href="2021/02/27/markdown-bu-wan-quan-yu-fa-ji-lu/"/>
      <url>2021/02/27/markdown-bu-wan-quan-yu-fa-ji-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h3><p><strong>本文参考了</strong></p><blockquote><p><a href="https://github.com/younghz/Markdown">GitHub</a><br><a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a></p></blockquote><p><strong>Markdown语法主要分为如下几大部分</strong><br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠</strong>，<strong>标记符号</strong>。</p><p><strong>进阶</strong><br><strong>注释</strong>，<strong>表格</strong>，<strong>公式</strong></p><hr><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h3><p>使用可以<code>#</code>来表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>###### 六级标题</p></blockquote><h3 id="2-段落"><a href="#2-段落" class="headerlink" title="2. 段落"></a>2. 段落</h3><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车。</p><p>效果：</p><blockquote><p>这是一个段落<br>这是段落内强制换行</p></blockquote><h3 id="3-区块引用"><a href="#3-区块引用" class="headerlink" title="3. 区块引用"></a>3. 区块引用</h3><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote></blockquote><h3 id="4-代码区块"><a href="#4-代码区块" class="headerlink" title="4. 代码区块"></a>4. 代码区块</h3><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如 ：<br>普通段落：</p><blockquote><p>void main()<br>{<br>   printf(“Hello, Markdown.”);<br>}   </p></blockquote><p>代码区块：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, Markdown."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>:代码区块需要和普通段落之间存在空行。</p><h3 id="5-强调"><a href="#5-强调" class="headerlink" title="5. 强调"></a>5. 强调</h3><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__<br>~~删除线~~<br>&lt;u&gt;带下划线文本&lt;/u&gt;</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong><br><del>删除线</del><br><u>带下划线文本</u></p></blockquote><h3 id="6-列表"><a href="#6-列表" class="headerlink" title="6. 列表"></a>6. 列表</h3><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个<code>空格</code>或<code>制表符</code>。若不在引用区块中，<code>必须</code>与前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项</p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li></ol></blockquote><h3 id="7-分割线"><a href="#7-分割线" class="headerlink" title="7. 分割线"></a>7. 分割线</h3><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><blockquote><p>我是一条分割线：</p><hr><p>上面是一条分割线，使用了4个<code>*</code>。</p></blockquote><h3 id="8-链接"><a href="#8-链接" class="headerlink" title="8. 链接"></a>8. 链接</h3><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](<a href="https://github.com/younghz/Markdown">https://github.com/younghz/Markdown</a> “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:<a href="https://github.com/younghz/Markdown">https://github.com/younghz/Markdown</a> “Markdown”<br>[2]:<a href="https://github.com/younghz/Markdown">https://github.com/younghz/Markdown</a> “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库1</a><br><a href="https://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h3 id="9-图片"><a href="#9-图片" class="headerlink" title="9. 图片"></a>9. 图片</h3><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。<br>语法：</p><blockquote><p>![<code>alt 属性文本</code>](<code>图片地址</code> <code>可选标题</code>)<br>![RUNOOB 图标](<a href="http://static.runoob.com/images/runoob-logo.png">http://static.runoob.com/images/runoob-logo.png</a> “RUNOOB”)</p></blockquote><p>效果：<br><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><h3 id="10-反斜杠"><a href="#10-反斜杠" class="headerlink" title="10. 反斜杠"></a>10. 反斜杠</h3><p>相当于<strong>反转义</strong>作用。使符号成为普通符号，似乎不能成功作用于下面那个符号。</p><h3 id="11-标记符号"><a href="#11-标记符号" class="headerlink" title="11. 标记符号"></a>11. 标记符号</h3><p><code>Tab键</code>上面那个符号起到标记作用。如：</p><blockquote><p>`ctrl+a`<br>效果：<br><code>ctrl+a</code>    </p></blockquote><hr><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="1-使用公式"><a href="#1-使用公式" class="headerlink" title="1. 使用公式"></a>1. 使用公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 <code>$$</code> 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 <code>Mathjax</code> 对数学公式进行渲染。如：</p><blockquote><p><code>$$</code><br>E = mc^2<br><code>$$</code></p></blockquote><p>效果：</p><blockquote><p>$$<br>E = mc^2<br>$$</p></blockquote><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h3><h4 id="2-1-使用html标签"><a href="#2-1-使用html标签" class="headerlink" title="2.1 使用html标签"></a>2.1 使用html标签</h4><p>由于markdown内嵌html语法，因此可以用特殊的html标签以及html注释进行注释。<strong>注意</strong>，使用HTML标签需要在前面空一行。</p><p>示例1：    </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token style language-css"><span class="token property">display</span><span class="token punctuation">:</span> none</span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span>我是注释，不会在浏览器中显示。我也是注释。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例2：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--哈哈我是注释，不会在浏览器中显示。--></span><span class="token comment">&lt;!--哈哈我是多段注释，不会在浏览器中显示。--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：没有效果（滑稽）</p><div style="display: none">    我是注释，不会在浏览器中显示。    我也是注释。</div><!--哈哈我是注释，不会在浏览器中显示。--><!--    哈哈我是多段    注释，    不会在浏览器中显示。--><h4 id="2-2-使用hack方法（稳定）"><a href="#2-2-使用hack方法（稳定）" class="headerlink" title="2.2 使用hack方法（稳定）"></a>2.2 使用hack方法（稳定）</h4><p>hack方法就是利用markdown的解析原理来实现注释的。hack方法比上面2种方法稳定得多，但是<strong>语义化太差</strong>。**<em>注释前后需要空行**</em></p><p>示例：</p><blockquote><p>[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)<br>[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)<br>[comment]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)<br>[//]: &lt;&gt; (哈哈我是注释，不会在浏览器中显示。)<br>[//]: # (哈哈我是注释，不会在浏览器中显示。)</p></blockquote><p>效果：还是没有效果（滑稽）</p><h3 id="3-表格"><a href="#3-表格" class="headerlink" title="3. 表格"></a>3. 表格</h3><p>Markdown 制作表格使用<code> |</code> 来分隔不同的单元格，使用 <code>- </code>来分隔表头和其他行。<br>我们可以设置表格的对齐方式：</p><blockquote><p><code>-:</code> 设置内容和标题栏居右对齐。<br><code>:-</code> 设置内容和标题栏居左对齐。<br><code>:-:</code> 设置内容和标题栏居中对齐。</p></blockquote><p>示例：</p><blockquote><p>| 左对齐 | 右对齐 | 居中对齐 |<br>| :----- | ----: | :----: |<br>| 单元格 | 单元格 | 单元格 |<br>| 单元格 | 单元格 | 单元格 |</p></blockquote><p>效果：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/25/hello-world/"/>
      <url>2021/02/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Latex常用命令</title>
      <link href="2021/02/25/latex-chang-yong-ming-ling/"/>
      <url>2021/02/25/latex-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="常用Latex命令，使用CTR-F查找，不断更新中…"><a href="#常用Latex命令，使用CTR-F查找，不断更新中…" class="headerlink" title="常用Latex命令，使用CTR+F查找，不断更新中…"></a>常用Latex命令，使用CTR+F查找，不断更新中…</h4><blockquote><p>附几个有用的链接：<br>1.<a href="https://liam.page/2014/09/08/latex-introduction/">入门介绍</a><br>2.<a href="http://www.wiris.com/editor/demo/en/developers#mathml-latex">公式转Latex</a><br>3.<a href="https://www.tablesgenerator.com/#">在线生成表格</a></p></blockquote><hr><h5 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h5><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">%</td><td align="center">注释</td></tr><tr><td align="center">\begin{center}…\end{center}</td><td align="center">居中</td></tr><tr><td align="center">\textit{text}</td><td align="center">斜体</td></tr><tr><td align="center">\textbf{文字}</td><td align="center">加粗</td></tr><tr><td align="center">\noindent</td><td align="center">换行后文字顶格</td></tr><tr><td align="center">\underline{文字}</td><td align="center">下划线</td></tr><tr><td align="center">\overline{text}</td><td align="center">上划线</td></tr></tbody></table><!-- 注释 | 命令 | $$ || 命令 | $$ |--><h5 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h5><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">\blacksquare (package:amssymb)</td><td align="center">$\blacksquare$</td></tr><tr><td align="center">\cdot</td><td align="center">$\cdot$</td></tr><tr><td align="center">\cdots</td><td align="center">$\cdots$</td></tr><tr><td align="center">\ell</td><td align="center">$\ell$</td></tr><tr><td align="center">\epsilon</td><td align="center">$\epsilon$</td></tr><tr><td align="center">\equiv</td><td align="center">$\equiv$</td></tr><tr><td align="center">\leq</td><td align="center">$\leq$</td></tr><tr><td align="center">\meq</td><td align="center">$\geq$</td></tr><tr><td align="center">\neq</td><td align="center">$\neq$</td></tr><tr><td align="center">\eta</td><td align="center">$\eta$</td></tr><tr><td align="center">\frac{numerator}{denominator}</td><td align="center">$\frac{1}{2}$</td></tr><tr><td align="center">\gamma</td><td align="center">$\gamma$</td></tr><tr><td align="center">\hat</td><td align="center">$\hat a$</td></tr><tr><td align="center">\hbar</td><td align="center">$\hbar$</td></tr><tr><td align="center">\in</td><td align="center">$\in$</td></tr><tr><td align="center">\lambda</td><td align="center">$\lambda$</td></tr><tr><td align="center">\langle+\rangle</td><td align="center">$\langle+\rangle$</td></tr><tr><td align="center">\notin</td><td align="center">$\notin$</td></tr><tr><td align="center">\parallel</td><td align="center">$\parallel$</td></tr><tr><td align="center">\perp</td><td align="center">$\perp$</td></tr><tr><td align="center">\Pr</td><td align="center">$\Pr$</td></tr><tr><td align="center">\prod</td><td align="center">$\prod$</td></tr><tr><td align="center">\rho</td><td align="center">$\rho$</td></tr><tr><td align="center">\subset</td><td align="center">$\subset$</td></tr><tr><td align="center">\subseteq</td><td align="center">$\subseteq$</td></tr><tr><td align="center">\to</td><td align="center">$\to$</td></tr><tr><td align="center">\times</td><td align="center">$\times$</td></tr><tr><td align="center">\ast</td><td align="center">$\ast$</td></tr></tbody></table><!-- 注释 | 命令 | $$ || 命令 | $$ || 命令 | $$ || 命令 | $$ || 命令 | $$ || 命令 | $$ || 命令 | $$ || 命令 | $$ || 命令 | $$ || 命令 | $$ |-->]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
